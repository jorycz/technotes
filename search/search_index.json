{"config":{"lang":["en"],"separator":"[\\s\\-\\.\"\\/'_(]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Tech Notes - My external memory","text":"<p>I store here commands, how-to guides or code/script snippets. It should be working on Linux or macOS.</p> <p>! WARNING ! Do not copy &amp; execute snippets blindly. You can damage your system.</p> <ul> <li>My Home Page</li> <li>Public repository list on github</li> </ul>"},{"location":"#show-my-public-ip","title":"Show my public IP","text":"<pre><code>curl checkip.amazonaws.com\n</code></pre> <ul> <li>Or use showmyip.com</li> </ul>"},{"location":"#generate-random-password","title":"Generate random password","text":"<pre><code>openssl rand -base64 6\n</code></pre>"},{"location":"#show-top-with-processes-filtered-with-pattern","title":"Show top with processes filtered with pattern","text":"<p>Pattern is matched against full command line.</p> <pre><code>top -d 1 -c -p $(pgrep -d',' -f postgres)\n</code></pre>"},{"location":"3DPrint/3DPrint-PrusaMiniPlus/","title":"3D Print Prusa Mini+","text":""},{"location":"3DPrint/3DPrint-PrusaMiniPlus/#fix-z-aixs-on-prusa-mini-if-selftest-fails","title":"Fix Z aixs on Prusa Mini+ if selftest fails","text":"<ul> <li>Insert USB Flash</li> <li>Enable <code>logging</code> to USB Flash</li> <li>Run <code>selftest</code> of aixs Z</li> <li>When finished, disable <code>logging</code></li> <li>Unplug USB Flash, connect to computer and read length of axis Z from log</li> </ul> <p>On Display menu, go to <code>Settings</code> and then <code>Press and Hold the control button</code> to enter <code>Experimental</code> menu. Then run <code>selftest</code> again.</p> <p>Experimental Settings on Prusa website</p>"},{"location":"3DPrint/3DPrint-PrusaMiniPlus/#for-my-mini-i-need-to-adjust-setup-in-the-experimental-menu","title":"For my Mini+ I need to adjust setup in the <code>Experimental</code> menu","text":"<ul> <li>Z-axis length: 190</li> <li>Extruder steps: 415</li> </ul>"},{"location":"3DPrint/3DPrint-PrusaMiniPlus/#integrace-camera-to-prusa-connect","title":"Integrace Camera to Prusa Connect","text":"<p>I bought ESP32-CAM module with MB board so I get PSRAM and also connector which is used for programming (microUSB in this case). USB-C version is also available but lack PSRAM from what I found on the internet. I flashed this jerzeek's firmware and set up following settings:</p> <ul> <li>Frame rate: 100 ms (10.0 f/s)</li> <li>Startup delay: 15</li> <li>Board: AI THINKER</li> <li>Frame size: SXGA (1280x1024)</li> <li>JPG quality: 14</li> <li>Enable PSRAM if available: Checked</li> <li>Buffers: 2</li> <li>Brightness: 1</li> <li>Contrast: 1    </li> <li>Saturation: 0</li> <li>Refresh frequency: 20 s</li> </ul> <p>To setup Refresh frequency to 20 second just change values in http form before submit. In Safari you can do that in JavaScript Console using this code:</p> <pre><code>Array.from(document.getElementsByTagName(\"option\"))\n.forEach(o =&gt; {\n    if (o.value === \"10\" || o.textContent.trim() === \"10 s\") {\n    o.value = \"20\";\n    o.textContent = \"20 s\";\n    }\n});\n</code></pre> <p>To add Camera to Prusa Connect you need fingerprint and camera token. Fingerprint is your password to PrusaLink and token is generated when you add new camera in Prusa Connect.</p> <p>For Camera case &amp; mount I remixed model where I added vent holes and larger hole to support of wide lenses. You can download it on printables</p> <p>To enable / disable LED on ESP32 use</p> <pre><code>curl -u admin:&lt;YOUR ESP32 PASSWORD&gt; http://&lt;YOUR ESP32 IP&gt;/flash?v=200\n</code></pre> <ul> <li><code>v=0</code> - Disable LED</li> <li><code>v=1</code> - Enable LED (intensity could be 1 - 250)</li> </ul>"},{"location":"Git/Git-Common/","title":"Git Common","text":"<pre><code>- v = verbose\n</code></pre>"},{"location":"Git/Git-Common/#pull-add-all-including-delete-commit-push","title":"pull, add all (including delete), commit, push","text":"<pre><code>git fetch -v   ### updates your local reference to the main branch from origin\ngit merge      ### merge changes for the current branch\n    ### or git pull which is equivalent of both\ngit add -A     ### add (-A / --all) changes (ADM) for whole repository\ngit commit -m \"MESSAGE\"   ### save changes to local repository, create checkpoint\ngit push\n</code></pre> <p>One-liner if it's safe</p> <pre><code>git pull &amp;&amp; git add --all &amp;&amp; git commit -am \"MESSAGE\" &amp;&amp; git push\n</code></pre>"},{"location":"Git/Git-Common/#fast-helpers","title":"Fast Helpers","text":"<pre><code>git log --pretty=oneline\n# git whatchanged\ngit diff HASH                    ### diff of file contents\ngit diff --name-status HASH      ### diff of file names\ngit show -C HASH\ngit clone https://github.com/jorycz/macOS-setup\n# git clone git@github.com:jorycz/macOS-setup\n</code></pre> <ul> <li>Viewing the Commit History on git-scm.com/book</li> </ul>"},{"location":"Git/Git-Common/#shows-differences-between-remote-and-local-repo-local-view","title":"Shows differences between remote and local repo (local view)","text":"<p>Your branch is ahead of 'origin/master' by 2 commits.</p> <pre><code>git diff origin/$(git rev-parse --abbrev-ref HEAD)\n</code></pre> <p>Or use these commads:</p> <pre><code>    ### ALWAYS update remote copy on local\ngit remote -v update\n\n    ### what was changed on remote\ngit status -uno\n    ### only file names with modification type\ngit diff --name-status HEAD..origin/$(git branch --show-current)\n    ### what was changed on local\ngit diff origin/$(git branch --show-current)\n    ### only file names with modification type\ngit diff --name-status origin/$(git branch --show-current)\n</code></pre>"},{"location":"Git/Git-Common/#stash","title":"Stash","text":"<pre><code>git add folder/file.yml    ### Store only one file\ngit add -A                 ### Store ALL actual work\n\ngit stash push -m \"STASH MESSAGE\"\ngit stash list             ### List all stored stashes\n\n    ### Restore _latest_ stash and remove it from stashed (previously stored)\ngit stash pop\n    ### OR\ngit stash pop stash@{X}    ### for particular\n    ### OR\ngit stash drop &lt;STASH&gt;     ### if you want your work discard\ngit stash apply &lt;STASH&gt;    ### if you want your work apply to current branch\n</code></pre>"},{"location":"Git/Git-Common/#branches","title":"Branches","text":"<pre><code>git branch -a   ### Show Local and Remote branches\n</code></pre> <p>Create and work on new branch</p> <pre><code>git switch -c abc                  ### Create &amp; switch to branch abc\ntouch file-in-working-branch.txt   ### Work on abc branch ...\ngit add -A\ngit status\ngit commit -am \"MESSSAGE\"\n</code></pre> <p>Push branch to remote</p> <pre><code>git switch abc                       ### first time\ngit push --set-upstream origin abc   ### later use just git push (in branch)\n</code></pre> <p>Pull branch</p> <pre><code>git pull   ### first time on OTHER computers\ngit switch abc\ngit branch --set-upstream-to=origin/abc abc   ### later git pull (in branch)\n</code></pre> <p>Merge branch</p> <pre><code>git switch main          ### Switch to main or other branch you want to merge with\ngit merge abc            ### Merge changes from abc branch to main\ngit push                 ### Push to remote\n</code></pre> <p>Delete branch</p> <pre><code>git branch -D abc        ### Delete branch on local if you wish\ngit push -d origin abc   ### Delete branch on remote if you wish\n\n    ### On OTHER computers, refresh changes and delete also\ngit fetch --all --prune\ngit branch -D abc\n</code></pre> <ul> <li><code>-d OR --delete</code> - deletes the branch if it has already been fully merged</li> <li><code>-D OR --delete --force</code> - deletes the branch \"irrespective of its merged status\"</li> </ul>"},{"location":"Git/Git-Common/#undo-last-commit","title":"Undo last Commit","text":"<p>Undo the last commit but keep changes staged.</p> <pre><code>git reset --soft HEAD~1\n</code></pre> <p>Undo the last commit and unstage changes, keeping files as <code>Modified</code> in <code>working copy</code>.</p> <pre><code>git reset --mixed HEAD~1\n</code></pre> <p>Undo the last commit and discard (permanently delete) all your changes. DANGER </p> <pre><code>git reset --hard HEAD~1\n</code></pre>"},{"location":"Git/Git-Common/#rebase","title":"Rebase","text":"<p>If you want to combine local commits before pushing them upstream, for example, because you discovered a typo or bug after a commit, you can do this interactively.</p> <pre><code>git rebase -i\n</code></pre>"},{"location":"Git/Git-Common/#clone-repo-and-set-state-to-particular-commit-hash","title":"Clone repo and set state to particular commit hash","text":"<pre><code>git clone https://github.com/&lt;USER&gt;/&lt;REPO&gt; repository-tmp\ncd repository-tmp\ngit reset --hard 1234567XYZ5554a093c9e883ce239cf123456789\n### HEAD is not at ... (commit message)\n</code></pre>"},{"location":"Git/Git-Common/#forget-my-changes-on-file","title":"Forget my changes on file","text":"<pre><code>git checkout ABC/abc.info\n</code></pre> <ul> <li>If <code>ABC/abc.info</code> is a file path, this command restores that file from the latest committed version in the current branch, discarding any local changes in that file.</li> <li> <ul> <li>Beware that if <code>ABC/abc.info</code> exists as a branch, git will switch to that branch!</li> </ul> </li> </ul>"},{"location":"Git/Git-Common/#git-tagging","title":"Git Tagging","text":"<pre><code>git describe --tags\n</code></pre>"},{"location":"Git/Git-Common/#create-tag","title":"Create tag","text":"<p>Workflow is:</p> <ul> <li>work on content as usually and <code>add</code> it</li> <li><code>commit</code></li> <li><code>push</code></li> <li><code>create tag</code></li> <li><code>push tag</code></li> </ul> <p>Create tag for last commit:</p> <pre><code>git tag\ngit tag 0.0.X\ngit push origin 0.0.X       ### after last commit\n### git push origin --tags  ### Optionally: push all created tags\n</code></pre>"},{"location":"Git/Git-Common/#clone-repo-using-tag","title":"Clone repo using tag","text":"<pre><code>git clone --branch 0.0.1 git@github.com:&lt;REPO&gt;\n</code></pre>"},{"location":"Git/Git-Common/#delete-tag","title":"Delete tag","text":"<pre><code>git tag -d 0.0.1                   ### delete tag on local\ngit push origin :refs/tags/0.0.1   ### delete tag on remote\n</code></pre> <p><code>git tag 0.0.1</code> - lightweight - just a pointer to a specific commit <code>git tag -a v1.4 -m \"my version 1.4\"</code> - annotated - full objects in the Git database, They\u2019re checksummed; contain the tagger name, email, and date; have a tagging message; and can be signed and verified with GNU Privacy Guard (GPG)</p>"},{"location":"Git/Git-Common/#config","title":"Config","text":"<pre><code>git config --global user.name \"MAME\"\ngit config --global user.email email@somewhere.com\ngit config --global pull.rebase false\n# git config --global http.proxy http://proxy:port\n# git config --global http.sslverify false\n</code></pre>"},{"location":"Git/Git-Common/#change-remote-repo-url","title":"Change remote repo URL","text":"<pre><code>git remote add origin https://github.com/&lt;USER&gt;/&lt;REPO&gt;.git\n# or SSH: git remote &lt;add|set-url&gt; origin git@github.com:&lt;USER&gt;/&lt;REPO&gt;.git\n# or SSH: git remote &lt;add|set-url&gt; origin ssh://git@cmd/home/git/ansible-cmd.git\n</code></pre>"},{"location":"Git/Git-Common/#debug","title":"DEBUG","text":"<pre><code>export GIT_CURL_VERBOSE=1\nexport GIT_TRACE_PACKET=1\n</code></pre>"},{"location":"Git/Git-CreateServer/","title":"Git Create Server","text":""},{"location":"Git/Git-CreateServer/#pure-git-server-on-linux","title":"Pure git server on linux","text":"<p>Setting Up the Server on git-scm.com/book</p> <pre><code>apt install git\nsu - git\nmkdir ansible.git\ncd ansible.git/\ngit init --bare\n</code></pre> <p>Secure git account</p> <pre><code>cat /etc/shells   ### see if git-shell is already in there and install it if not\nwhich git-shell\nsudo -e /etc/shells   ### add the path to git-shell\nsudo chsh git -s $(which git-shell)   ### set shell for user git\n   ### now ssh git@gitserver doesn't work\n</code></pre> <p>At this point, users are still able to use SSH port forwarding to access any host the git server is able to reach. If you want to prevent that, you can edit the <code>authorized_keys</code> file and prepend the following options to each key you\u2019d like to restrict:</p> <pre><code>no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa AAAAB3NzaC1yc2EAAAADAQA...\n</code></pre>"},{"location":"Git/Git-CreateServer/#gitolite","title":"Gitolite","text":"<p>Gitolite</p>"},{"location":"Git/Git-CreateServer/#install","title":"Install","text":"<pre><code>### Create user `git` with home directory `/home/git`\nsu - git\nmkdir bin\necho 'PATH=$PATH:/home/git/bin' &gt;&gt; /home/git/.bashrc\n\n### Create first admin user pub key gitolite-admin.pub\ngit clone https://github.com/sitaramc/gitolite\ngitolite/install -ln\nbin/gitolite setup -pk gitolite-admin.pub\n</code></pre>"},{"location":"Git/Git-CreateServer/#create-repository-and-add-new-user","title":"Create repository and add new user","text":"<ul> <li>Add name of new repository to <code>gitolite-admin</code> repository conf file <code>conf/gitolite.conf</code> with username from <code>keydir</code> and rights.</li> <li>Add public key of user that should have access to this repository, for example <code>keydir/myUser.pub</code></li> <li>Commit and push.</li> <li>After that, clone of this new empty repo from gitolite server.</li> </ul> <p>Now add some content and then <code>git add -A</code>. When you do first commit like <code>git commit -m \"Inital commit\"</code>, new branch will be created. If it's <code>master</code> or <code>main</code> depends on your git client. Finally push changes to git server using <code>git push</code>.</p>"},{"location":"Git/Git-CreateServer/#if-you-damage-remove-loose-access-to-server-as-admin","title":"If you damage / remove / loose access to server as admin","text":"<p>lost-admin-keyaccess</p> <ul> <li>Replace current <code>admin.pub</code> in gitolite-admin repo with command <code>gitolite setup -pk admin.pub</code></li> </ul>"},{"location":"Git/Git-CreateServer/#custom-update-script-post-info-to-google-chat","title":"Custom update script - post info to Google Chat","text":"<p>Create <code>.gitolite/hooks/common/post-receive</code> with content</p> <pre><code>#!/bin/bash\n\nPROXY=http://...\n\nsendMsg() {\n    echo -n \"Message to Google Chat: \"\n    curl -x ${PROXY} -s -H \"Content-type: application/json; charset=UTF-8\" --data \"{'text':'$(&lt;/dev/stdin)'}\" \"https://chat.googleapis.com/v1/spaces/SomeSpaceID/messages?key=someGoogleChatSpaceKey...\" | jq '.text'\n}\n\nwhile read oldrev newrev refname; do\n\n    branch=`echo $refname | cut -d/ -f3`\n\n    for commit in $(git rev-list $oldrev..$newrev); do\n        MSG=$(git --no-pager show -s --pretty=\"GIT push [ $GL_REPO ---&gt;&amp;1 &gt; /dev/shm/gitPushMessageDebug\n    done\n\ndone\n</code></pre> <p>Run</p> <pre><code>cd /home/git &amp;&amp; bin/gitolite setup\n</code></pre> <p>to update already existing repositories. New ones will be created with link to this hook automatically.</p>"},{"location":"Git/Git-CreateServer/#restore-git-repository-to-server-from-encrypted-backup","title":"Restore git repository to server from encrypted backup","text":"<ul> <li>To authorized_keys of git user, add key of user (me) that will be restoring that repository.</li> <li>Unpack repository from backup to home of git user</li> <li>Then test clone of that repository by <code>git clone ssh://USER@HOSTNAME/home/USER/REPO.git</code></li> </ul>"},{"location":"Git/Git-Issues/","title":"Git Issues","text":""},{"location":"Git/Git-Issues/#clone-issue-remote-head-refers-to-nonexistent-ref","title":"clone issue - remote HEAD refers to nonexistent ref","text":"<pre><code>warning: remote HEAD refers to nonexistent ref, unable to checkout.\n</code></pre> <p>Your git client wants to use master branch but main is used as default (new name for master).</p> <pre><code>git log             ### check what is now your default branch\nfatal: your current branch 'master' does not have any commits yet\ngit branch -a       ### show all branches\n  remotes/origin/main\ngit switch main     ### just switch to main branch\ngit branch -a       ### show all branches and main is now default\n</code></pre>"},{"location":"Git/Git-Issues/#push-issue-rpc-failes","title":"push issue - RPC failes","text":"<pre><code>error: RPC failed; HTTP 400 curl 22 The requested URL returned error: 400\nfatal: the remote end hung up unexpectedly\n</code></pre> <p>Try to increase POST buffer</p> <pre><code>git config --global http.postBuffer 157286400\n</code></pre>"},{"location":"Git/Git-Issues/#push-issue-rejected","title":"push issue - rejected","text":"<pre><code>! [rejected]          master -&gt; master (fetch first)\nerror: failed to push some refs to 'host:repo'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n</code></pre> <p>Pull and push again should resolve it</p> <pre><code>git pull &amp;&amp; git push\n</code></pre> <p>If not, manual merging could be required.</p>"},{"location":"Git/Git-Issues/#pull-issue-cannot-pull-with-rebase","title":"pull issue - cannot pull with rebase","text":"<pre><code>error: cannot pull with rebase: You have unstaged changes.\nerror: please commit or stash them.\n</code></pre> <p>My changed files were changed on remote repository already. I need to compare files and merge them, not overwrite remote version if I have old version!</p> <pre><code>$ git status\nOn branch master\nYour branch is up to date with 'origin/master'.\n\nChanges not staged for commit:\n(use \"git add &lt;file&gt;...\" to update what will be committed)\n(use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n    modified:   ansible/roles/app/abc/tasks/main.yml\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n</code></pre> <p>Shows list of files in I need to compare changes</p> <pre><code>$ git diff\ndiff --git a/ansible/roles/app/abc/tasks/main.yml b/ansible/roles/app/abc/tasks/main.yml\nindex 50789228..aa2b5553 100644\n--- a/ansible/roles/app/abc/tasks/main.yml\n+++ b/ansible/roles/app/abc/tasks/main.yml\n@@ -60,7 +60,14 @@\n\n+  ansible.builtin.lineinfile:\n+    path: '{{ haproxy_config }}'\n+    insertafter: '^\\tlog\\tglobal$'\n+    line: \"\\tlog-format \\\"[%t] Connection on port %fp from ip %ci forwarded to %si:%sp with data %[capture.req.hdr(0)]\\\"\"\n+\n@@ -68,8 +75,10 @@\n    replace: '\\1\\t{{ item.new }}'\n    backup: yes\nwith_items: \n-    - { section: 'defaults', original: 'option\\s+httplog', new: 'option\\ttcplog' }\n+    - { section: 'defaults', original: 'option\\s+httplog', new: '#option\\ttcplog' }\n</code></pre> <p>I don't want to delete <code>option tcplog</code> which should be there. On this computer I have old version of the file. So I will copy lines I want to keep to pasteboard and just throw away my current changes in this file:</p> <pre><code>git checkout -- ansible/roles/app/abc/tasks/main.yml\n### You can discard ALL your changes if you wish with: git reset --hard\n</code></pre> <p>Check everything is OK</p> <pre><code>$ git status\nOn branch master\nYour branch is up to date with 'origin/master'.\n\nnothing to commit, working tree clean\n\n$ git pull\n...\n</code></pre> <p>OR DANGER pull what is in remote repository and continue working</p> <pre><code>git stash\ngit pull --rebase\ngit stash pop  # Apply your stashed changes back\n</code></pre> <p>OR DANGER keep my changes and push to remote repository</p> <pre><code>git add .\ngit commit -m \"Save work before pulling\"\ngit pull --rebase\n</code></pre>"},{"location":"Git/Git-Issues/#remove-git-username-and-password-pat-for-https","title":"Remove GIT username and password (PAT) for HTTPS","text":"<pre><code>echo \"url=https://github.com\" | git credential reject ### Remove cached credentials\ngit push origin main      ### Enter username and password (Personal Acccess Token)\n</code></pre> <p>Or if you have <code>git credential-osxkeychain</code>, enter this to Terminal</p> <pre><code>git credential-osxkeychain erase\nhost=github.com\nprotocol=https\n</code></pre> <p>And press Enter ...</p>"},{"location":"Git/Git-NewRepository/","title":"Git New Repository","text":""},{"location":"Git/Git-NewRepository/#create-new-repo-from-local-folder-and-push-to-github","title":"Create new repo from local folder and push to github","text":"<p>Create empty repository on github - NO readme, NO gitignore and NO licence</p> <pre><code>echo \"# Initial commit.\" &gt;&gt; README.md\n# touch .gitignore\n# copy LICENSE (MIT)\n</code></pre> <p>Create repo from local folder</p> <pre><code>git init\ngit add .\ngit commit -m \"Initial release.\"\ngit branch -M main\ngit remote add origin https://github.com/&lt;USER&gt;/&lt;REPO&gt;.git\ngit push --set-upstream origin main\n# or user shorter version git push -u ...\n# git push -uv origin master   ### push local branch master to remote origin\n# git push -uv origin --all    ### push all branches\ngit status\n</code></pre>"},{"location":"Go/Go/","title":"Go golang","text":"<ul> <li>Go Releases</li> </ul>"},{"location":"Go/Go/#installation-of-latest-version-in-shell","title":"Installation of latest version in shell","text":""},{"location":"Go/Go/#first-time-setup","title":"First time setup","text":"<pre><code>echo \"export PATH=/usr/local/go/bin:${PATH}\" | sudo tee -a $HOME/.bashrc\necho \"export GOPATH=${HOME}/go\" | sudo tee -a $HOME/.bashrc\nsource $HOME/.bashrc\n</code></pre>"},{"location":"Go/Go/#install","title":"Install","text":"<p>Set platform <code>linux-amd64</code> Linux Intel or <code>darwin-arm64</code> macOS Arm</p> <pre><code>cd ~/Downloads/\nP=\"linux-amd64\"\nWEBPAGE=\"https://golang.google.cn/dl/\"\nURL=$(echo -n ${WEBPAGE} ; curl -s ${WEBPAGE} | grep 'download downloadBox' | sed \"s;.*\\/dl\\/\\(.*\\)\\\".*;\\1;\" | grep ${P})\necho \"Downloading : $URL\"\ncurl -s -O -L \"${URL}\"\necho \"Unpacking ...\"\nsudo tar -C /usr/local -xzf *.tar.gz\n</code></pre> <p>Check version</p> <pre><code>go version\n</code></pre>"},{"location":"Go/Go/#update","title":"Update","text":"<pre><code>cd /usr/local/\ntar -czf /home/${USER}/usr-local-go-$(date -I)-backup.tar.gz go/      ### BACKUP\nsudo rm -rf /usr/local/go/\n</code></pre> <p>Now continue in Install section</p>"},{"location":"Go/Go/#create-basic-module","title":"Create basic module","text":"<p>goApp application</p> <pre><code>cd ${HOME}/\nmkdir go\ncd go\nmkdir goApp\ncd goApp\ngo mod init github.com/USER/goApp\n### go mod init &lt;module_name&gt;\n### import \"&lt;module_name&gt;/&lt;pkg_name&gt;\"\ntouch goApp.go\n</code></pre>"},{"location":"Go/Go/#add-package-to-module","title":"Add package to module","text":"<pre><code>cd go/goApp\nmkdir logging\ntouch logging/logging.go\n</code></pre> <p>in goApp.go insert</p> <pre><code>import (\n    \"github.com/USER/goApp/logging\"\n)\n</code></pre> <p>Create a module meant for sharing</p>"},{"location":"Go/Go/#import-local-module","title":"Import local module","text":"<p>Clone repository of module next to folder of goApp local repo, in which I want to use this module. Then place to <code>go.mod</code> below require:</p> <pre><code>module github.com/USER/tasmota-alerter\n\ngo 1.21.6\n\nrequire (\n    ...\n    github.com/USER/sp-json v0.0.0-20240222204221-22d496d5b142\n)\n\nreplace github.com/USER/sp-json =&gt; ../sp-json\n\nrequire (\n    ...\n)\n</code></pre>"},{"location":"Go/Go/#handy-commands","title":"Handy commands","text":"<pre><code>go mod tidy      ### find and download all modules app depends on\n</code></pre>"},{"location":"Google/Google/","title":"Google","text":""},{"location":"Google/Google/#create-script-to-delete-all-messages-with-label","title":"Create script to delete all messages with label","text":"<p>To automatically delete sent emails, create filter <code>from ME@gmail.com</code> and add label <code>ToBeDeleted</code>. Then create new script on script.google.com</p> <pre><code>function deleteSentMails() {\nvar label = GmailApp.getUserLabelByName(\"ToBeDeleted\");  \nvar threads = label.getThreads();  \nfor (var i = 0; i &lt; threads.length; i++) {  \n    threads[i].moveToTrash();\n    } \n}\n</code></pre> <p>And add trigger to run it every day for example between 02:00 and 03:00.</p>"},{"location":"Google/Google/#chrome","title":"Chrome","text":""},{"location":"Google/Google/#delete-hsts-for-domain-host","title":"Delete HSTS for domain / host","text":"<p><code>chrome://net-internals/#hsts</code></p>"},{"location":"Google/Google/#continue-to-page-with-ssl-error","title":"Continue to page with SSL error","text":"<p>Anywhere on page just write <code>thisisunsafe</code></p>"},{"location":"Google/Google/#ignore-invalid-certificate","title":"Ignore Invalid Certificate","text":"<p>When messages like <code>NET::ERR_CERT_AUTHORITY_INVALID</code> or <code>NET::ERR_CERT_COMMON_NAME_INVALID</code> appear.</p> <pre><code>Google\\ Chrome --ignore-certificate-errors\nchromium-browser --start-fullscreen --ignore-certificate-errors --test-type\n# more to test --disable-popup-blocking --kiosk --disable-web-security\n</code></pre>"},{"location":"Linux/Linux-AltServer/","title":"Linux Alt Server","text":"<p>AltServer-Linux-PyScript</p>"},{"location":"Linux/Linux-AltServer/#install","title":"Install","text":"<p>Install using AltServer-Linux script it is very easy. I need to install requests python module on Ubuntu 24 <code>apt install python3-requests</code></p> <ul> <li>Map iPad connected to linux CT (using Proxmox)</li> <li> <ul> <li>Resources / Add Device Passthrough / DEVICE (like /dev/bus/usb/001/004)</li> </ul> </li> </ul> <p>Run CT and on it <code>usbmuxd</code> for first pairing, then <code>python3 main.py</code>. More details here</p>"},{"location":"Linux/Linux-Apache/","title":"Linux Apache","text":""},{"location":"Linux/Linux-Apache/#client-cert-authorization","title":"Client Cert Authorization","text":"<p>Virtual Host Example</p> <pre><code>&lt;IfModule mod_ssl.c&gt;\n    &lt;VirtualHost *:443&gt;\n        ...\n        SSLCACertificateFile /etc/ssl/certs/MyCA.pem\n\n        &lt;Location /admin&gt;\n            SSLVerifyClient     require\n            SSLOptions           +FakeBasicAuth +ExportCertData +StdEnvVars\n            SSLRequireSSL\n            AuthName             \"Restricted Area\"\n            AuthType             Basic\n            AuthUserFile         /etc/ssl/web-users/httpd.passwd.admin\n            require              valid-user\n            # SSLRequire           ( %{SSL_CLIENT_I_DN} eq \"CN=My,DC=ca,DC=com\" )\n            SSLRequire %{SSL_CIPHER_USEKEYSIZE} &gt;= 128\n        &lt;/Location&gt;\n\n    &lt;/VirtualHost&gt;\n&lt;/IfModule&gt;\n</code></pre> <p>httpd.passwd.admin Example</p> <pre><code>/C=CZ/ST=Czech Republic/L=Prague/O=MyCompany/OU=MyOranizationUnit/CN=MyCertCN:xxj31ZMTZzkVA\n/C=CZ/...\n</code></pre> <ul> <li>xxj31ZMTZzkVA constant is documented in Apache SSL documentation</li> </ul>"},{"location":"Linux/Linux-Apache/#settings","title":"Settings","text":"<p>Main conf</p> <pre><code>ServerTokens Prod\nEnableMMAP off\nSecServerSignature \"My\"\n...\n</code></pre> <p>SSL</p> <pre><code>SSLInsecureRenegotiation off\nSSLProtocol -all +TLSv1.2 +TLSv1.3\nSSLCipherSuite ...\nSSLHonorCipherOrder On\n...\nSSLCARevocationCheck chain no_crl_for_cert_ok\nSSLCARevocationFile \"/etc/apache2/certs/CRL.pem\"\n</code></pre> <p>Logging</p> <pre><code>LogFormat \"%h:%{remote}p %l %u %t \\\"%r\\\" %&gt;s %O %I %D \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\" %{version}c %{cipher}c \\\"%{errcode}c\\\" \\\"%{errstr}c\\\"\" combined\n</code></pre> <p>Headers</p> <pre><code>&lt;IfModule headers_module&gt;\n\n    ### Add source hos and port\n    RewriteEngine On\n    RewriteRule .* - [E=REMOTE_PORT:%{REMOTE_PORT},NE]\n    RequestHeader set X-Remote-Port \"%{REMOTE_PORT}e\" env=REMOTE_PORT\n    RequestHeader set X-Remote-Host \"%{REMOTE_ADDR}s\"\n\n    ### Propagate information about SSL CIPHER SUITE used for secure connection with request\n    RewriteRule .* - [E=SSL_CIPHER:%{SSL_CIPHER},NE]\n    RequestHeader set X-SSL-CIPHER \"%{SSL_CIPHER}s\" early\n\n    ### HSTS protection and Cache Control\n    Header always set Strict-Transport-Security \"max-age=31536000\"\n    Header set Cache-Control \"max-age=0, no-cache, no-store, must-revalidate\"\n    Header set Pragma \"no-cache\"\n\n    ### Cross Site Scripting (XSS) and Clickjacking protection\n    Header edit Set-Cookie ^(.*)$ $1;HttpOnly;Secure\n    Header always append X-Frame-Options SAMEORIGIN\n    Header set X-XSS-Protection \"1; mode=block\"\n    Header set X-Content-Type-Options: \"nosniff\"\n    &lt;If \"req('Host') !~ /.*EXCEPTION1*/ &amp;&amp; req('Host') !~ /.*EXCEPTION2*/\"&gt;\n        Header set Content-Security-Policy \"frame-ancestors 'self'\"\n    &lt;/If&gt;\n\n    # Remove Server / X-Powered-By\n    Header unset X-Powered-By\n    Header always unset X-Powered-By\n\n&lt;/IfModule&gt;\n</code></pre>"},{"location":"Linux/Linux-Apache/#log-all-headers","title":"Log All Headers","text":"<pre><code>a2enmod log_forensic\n</code></pre> <p>To global config</p> <pre><code>&lt;IfModule log_forensic_module&gt;\n    ForensicLog ${APACHE_LOG_DIR}/forensic.log\n&lt;/IfModule&gt;\n</code></pre>"},{"location":"Linux/Linux-Apache/#log-proxypass-client-ip","title":"Log ProxyPass Client IP","text":"<pre><code>a2enmod remoteip\n</code></pre> <p>To global config</p> <pre><code>RemoteIPHeader X-Forwarded-For\nRemoteIPInternalProxy LOCAL_PROXY_IP\n</code></pre> <ul> <li>Without RemoteIPInternalProxy set, LOCAL_PROXY_IP will appear in logs instead of local LAN client IP. External client will appear in logs OK.</li> </ul>"},{"location":"Linux/Linux-AudioVideo/","title":"Linux Audio Video","text":""},{"location":"Linux/Linux-AudioVideo/#minidlna","title":"MiniDLNA","text":"<pre><code>apt install minidlna\n</code></pre> <p>Read How-To on wiki.debian.org and thumbnails tip on reddit</p>"},{"location":"Linux/Linux-AudioVideo/#convert-audio-to-ac3-in-movie","title":"Convert Audio to AC3 in Movie","text":"<p>Find all movies </p> <pre><code>find . -type f -size +5M -exec exiftool {} + | egrep \"File Name|AAC|Audio Channels\" &gt; aac.txt\n</code></pre> <p>Filter AAC movies. Convert is necessary only for movies with more channels than 2. Stereo is OK.</p> <pre><code>grep -A 1 -B 1 AAC aac.txt\n</code></pre> <p>Conver</p> <pre><code>ffmpeg -i video.mkv -map 0 -c:v copy -c:s copy -c:a ac3 -b:a 640k output.mkv\n</code></pre> <ul> <li>WARNING - this will convert all audio tracks to AC3 using 640kbps. I don't want this in case of more audio tracks. Check below.</li> </ul>"},{"location":"Linux/Linux-AudioVideo/#ffmpeg-numbering","title":"ffmpeg numbering","text":"<p><code>ffmpeg -i Meet_the_Parents_2000_1080p_SK_CZ_ENG.mkv</code></p> <pre><code>Input #0, matroska,webm, from 'Meet_the_Parents_2000_1080p_SK_CZ_ENG.mkv':\nMetadata:\n    encoder         : libebml v1.3.0 + libmatroska v1.4.1\n    creation_time   : 2018-09-29T19:31:58.000000Z\nDuration: 01:47:39.77, start: 0.000000, bitrate: 3174 kb/s\n    Stream #0:0: Video: h264 (High), yuv420p(progressive), 1920x1080 [SAR 1:1 DAR 16:9], 23.98 fps, 23.98 tbr, 1k tbn, 47.95 tbc (default)\n    Stream #0:1(slo): Audio: ac3, 48000 Hz, stereo, fltp, 224 kb/s (default)\n    Metadata:\n    title           : SK\n    Stream #0:2(cze): Audio: ac3, 48000 Hz, stereo, fltp, 224 kb/s\n    Metadata:\n    title           : CZ\n    Stream #0:3(eng): Audio: aac (LC), 48000 Hz, 5.1, fltp\n    Metadata:\n    title           : ENG\n    Stream #0:4(cze): Subtitle: subrip\n    Metadata:\n    title           : CZ\n    Stream #0:5(eng): Subtitle: subrip\n    Metadata:\n    title           : ENG\n</code></pre> <p><code>ffmpeg -i Meet_the_Parents_2000_1080p_SK_CZ_ENG.mkv -map 0 -c:v copy -c:s copy -c:a:0 copy -c:a:1 copy -c:a:2 ac3 -b:a:2 640k output.mkv</code></p> <p>Copy AUDIO track 0 <code>(a:0)</code> which is Audio track from (global) list <code>0:1</code>. Copy AUDIO track 1 <code>(a:1)</code> which is Audio track from (global) list <code>0:2</code>.  </p> <p><code>0:1</code> and <code>0:2</code> is numbering of all tracks. Global list shows audio and video tracks together. So numbers in format 0:x are all tracks (video or audio track doesn't matter).</p> <p>Now, when I tell ffmpeg track is video :v or audio :a, track numbering will change and beginning always from 0 for :v or :a!</p> <p>So <code>-c:a:0 copy</code> (audio tracks only) means copy track 0:1 without changes (just do that for tracks I don't want to change) and <code>-c:a:2 ac3 -b:a:2 640k</code> means convert <code>0:3</code> (for example <code>audio eng aac</code>) to ac3 with bitrate 640kbps.</p> <p>In case movie has more tracks and I want to delete first two and convert other to AC3:</p> <pre><code>ffmpeg -i Zodiac.2007.DC.mkv -map 0 -map -0:a:0 -map -0:a:1 -c:v copy -c:s copy -c:a ac3 -b:a 640k output.mkv\n</code></pre> <p>SOURCE on Stack Overflow</p>"},{"location":"Linux/Linux-BASH/","title":"Linux BASH","text":""},{"location":"Linux/Linux-BASH/#script-dir-and-name","title":"Script dir and name","text":"<pre><code>SCRIPT_NAME=${0##*/}\nSCRIPT_PATH=\"$( dirname -- \"${BASH_SOURCE[0]}\"; )/\"\n# TMP_FILE_BASE64=\"/dev/shm/${SCRIPT_NAME}.data.base64\" ...\n# TMP_FILE_BASE64=\"$(mktemp)\"\n</code></pre>"},{"location":"Linux/Linux-BASH/#random-number-string","title":"Random Number, String","text":"<pre><code># numbers (from 1 to 50)\nRANDOM_NUMBER=$(echo $(( $RANDOM % 50 + 1 )))\n# lowercase + numbers\nOPERATION_ID=$(echo $RANDOM | md5sum | head -c 20)\n# lowercase + numbers + uppercase\nSIMPLE_PASS=$(tr -dc a-zA-Z0-9 &lt; /dev/urandom | head -c 16)\n</code></pre>"},{"location":"Linux/Linux-BASH/#minutes-since-epoch","title":"Minutes since EPOCH","text":"<pre><code>MINUTES_SINCE_EPOCH=$(($EPOCHSECONDS/60))\n</code></pre>"},{"location":"Linux/Linux-BASH/#check-if-variable-is-number","title":"Check if variable is NUMBER","text":"<pre><code>numbers='^[0-9]+$'\nif [[ ! ${1} =~ $numbers ]] ; then echo \"${SCRIPT_NAME}: [ ${1} ] is NOT a number!\" ; return 1 ; fi\n</code></pre>"},{"location":"Linux/Linux-BASH/#uppercase-lowercase","title":"Uppercase, Lowercase","text":"<pre><code>str=\"string\"\necho ${str^} nebo echo ${str^^}\nstr=\"STRING\"\necho ${str,} nebo echo ${str,,}\n</code></pre>"},{"location":"Linux/Linux-BASH/#substring","title":"Substring","text":"<p>Cut chars from the end</p> <pre><code>FIID_SQL=${FIID_LINE::-1}\n</code></pre> <p>Cut chars from the beginning</p> <pre><code>VAR_WITHOUT_PREFIX=${VAR:4}\n</code></pre> <p>Show count of chars from-to particular postion</p> <pre><code>VAR=\"123456789\" ; echo ${VAR:3:2}\n</code></pre>"},{"location":"Linux/Linux-BASH/#content-that-doesnt-needs-to-be-escaped","title":"Content that doesn't needs to be escaped","text":"<pre><code>VAR=$(cat &lt;&lt; 'EOF'\nSingle: ' and Double: \" quotes variable here.\nEOF\n)\n</code></pre>"},{"location":"Linux/Linux-BASH/#count-new-lines-per-second-in-log-file","title":"Count new lines per second in log file","text":"<pre><code>tail -F output.txt | { count=0; old=$(date +%s); while read line; do ((count++)); s=$(date +%s); if [ \"$s\" -ne \"$old\" ]; then echo \"$count lines per second\"; count=0; old=$s; fi; done; }\n</code></pre>"},{"location":"Linux/Linux-BASH/#redirect-all-script-ouptut-edge-case-exists-to-log","title":"Redirect all script ouptut (edge case exists) to log","text":"<pre><code>d() {\n    date +\"%d.%m.%Y - %H:%M:%S\"\n}\n\nLOGDIR=\"${SCRIPT_NAME}.logdir/\"\nif [ ! -d \"${LOGDIR}\" ] ; then mkdir ${LOGDIR} ; fi\nLOGFILE=\"`date \"+%Y_%m_%d\"`\"\nLOG=\"${LOGDIR}${LOGFILE}\"\n\n### LOG TO FILE ONLY\necho \"All outputs are redirected to [ ${LOG} ]\"\nif touch ${LOG}\nthen\n    exec 1&gt;&gt;${LOG}\n    exec 2&gt;&gt;${LOG}\nelse\n    echo \"[ CRITICAL ] - $(d) - ${SCRIPT_NAME} ERROR: Can't create LOG FILE [ ${LOG} ]. Script FAILED !!!\"\n    exit 1\nfi\n\n### LOG TO FILE and STDOUT\necho \"All outputs are redirected to [ ${LOG} ] and standard out\"\nif touch ${LOG}\nthen\n    exec 3&gt;&amp;1 4&gt;&amp;2\n    exec &gt; &gt;(tee -a \"${LOG}\" &gt;&amp;3) 2&gt; &gt;(tee -a \"${LOG}\" &gt;&amp;4)\nelse\n    echo \"[ CRITICAL ] - $(d) - ${SCRIPT_NAME} : Can't create LOG FILE [ ${LOG} ]. Script FAILED !!!\"\n    exit 1\nfi\n</code></pre>"},{"location":"Linux/Linux-BASH/#log-file-lines-retention","title":"Log file lines retention","text":"<pre><code>#!/bin/bash\n\nLOG=\"/path/to/logfile.log\"\n\nALL_LINES=$(cat ${LOG} | wc -l)\nKEEP_LINES=\"1000\"\nif [ ${ALL_LINES} -lt ${KEEP_LINES} ] ; then echo \"Nothing to delete.\" ; exit 0 ; fi\nDEL_LINES=$((ALL_LINES-KEEP_LINES))\n\nre='^[0-9]+$'\nif [[ $DEL_LINES =~ $re ]]\nthen\n    sed -i -e \"1,${DEL_LINES}d\" \"${LOG}\"\nelse\n    echo \"[ ${DEL_LINES} ] is not a number!\"\nfi\n</code></pre>"},{"location":"Linux/Linux-BASH/#redirect-only-stdout-to-console-and-all-others-to-file","title":"Redirect only stdout to console and all others to file","text":"<pre><code>{ command | tee /dev/tty; } &amp;&gt; /dev/null\n</code></pre>"},{"location":"Linux/Linux-BASH/#counting-how-long-a-task-took","title":"Counting how long a task took","text":"<pre><code>#!/bin/bash\n\n### Record the start time in nanoseconds\nstart_time=$(date +%s%N)\n\n### TASK (simulated here)\nsleep 3.2\n\n### Record the end time in nanoseconds\nend_time=$(date +%s%N)\n### Calculate the elapsed time in nanoseconds\nelapsed_time=$((end_time - start_time))\n\n### Convert nanoseconds to seconds\nelapsed_seconds=$((elapsed_time / 1000000000))\n\necho \"Elapsed time: $elapsed_seconds seconds\"\n</code></pre>"},{"location":"Linux/Linux-BASH/#parallel-run-of-several-scripts-and-wait-for-all-to-finish","title":"Parallel run of several scripts and wait for all to finish","text":"<pre><code>./LVCheck.sh $SRC_LV_DEV \"local\" &amp;\n./LVCheck.sh $DST_LV_DEV \"remote\" \"${USER}@${HOSTNAME}\" &amp;\nwait $(jobs -p)\n</code></pre>"},{"location":"Linux/Linux-BASH/#read-and-process-whole-line-with-spaces","title":"Read and process whole line with spaces","text":"<pre><code>while read LINE\ndo\necho \"${LINE}\"\ndone &lt; ${FILE}\n### done &lt; &lt;(command)\n</code></pre>"},{"location":"Linux/Linux-BASH/#date-and-time","title":"Date and Time","text":"<pre><code>TIME_MINUTE_AGO=`date --date '-1 min' \"+%d%m %H:%M:\"`\n</code></pre>"},{"location":"Linux/Linux-BASH/#fast-count-of-cycles","title":"Fast count of cycles","text":"<pre><code>count=0;\ntotal=0;\nfor i in $(getSomeNumber)\ndo\n((count++))\ntotal=$(($total+$i))\ndone\n</code></pre>"},{"location":"Linux/Linux-BASH/#counting-in-bash","title":"Counting in BASH","text":""},{"location":"Linux/Linux-BASH/#binbash","title":"!/bin/bash","text":"<pre><code># Original numbers\na=50.8\nb=15.3\n# Remove decimal\naa=$(echo ${a%.*})\nbb=$(echo ${b%.*})\n# Round numbers\naaa=$(printf %.0f $a)\nbbb=$(printf %.0f $b)\n\necho \"ORIGINAL $a : $b\"\necho \"REMOVED DECIMALS $aa : $bb\"\necho \"ROUNED $aaa : $bbb\"\n\necho \" ==== COUNTING ==== \"\necho \"+ $((aa+bb))\"\necho \"- $((aa-bb))\"\necho \"/ $((aa/bb))\"\nmod=$((aa%bb))\necho \"MOD $mod\"\necho \"DECIMAL $(($mod/$bb))\"\necho \"&gt; BASH can NOT count with .decimals.\"\n</code></pre>"},{"location":"Linux/Linux-BASH/#disable-enable-all-usb-script","title":"Disable &amp; Enable ALL USB script","text":"<p>Show all devices</p> <pre><code>for device in $(ls /sys/bus/usb/devices/*/product); do echo $device;cat $device;done\n</code></pre> <p>disableUSB.sh</p> <pre><code>#!/bin/bash\n\n#for device in $(ls /sys/bus/usb/devices/*/product)\nfor device in $(ls /sys/bus/usb/devices/usb*/product)\ndo\n    DEVICE_ID=$(echo $device | sed \"s;.*devices\\/\\(.*\\)\\/product.*;\\1;\")\n    echo \"DISABLING DEVICE: $DEVICE_ID ($device --- $(cat $device))\"\n    echo \"${DEVICE_ID}\" |sudo tee /sys/bus/usb/drivers/usb/unbind\ndone\n</code></pre> <p>enableUSB.sh</p> <pre><code>#!/bin/bash\n\nfor device in $(ls /sys/bus/usb/devices/*/product)\ndo\n    DEVICE_ID=$(echo $device | sed \"s;.*devices\\/\\(.*\\)\\/product.*;\\1;\")\n    echo \"ENABLING DEVICE: $DEVICE_ID ($device --- $(cat $device))\"\n    echo \"${DEVICE_ID}\" |sudo tee /sys/bus/usb/drivers/usb/bind\ndone\n</code></pre>"},{"location":"Linux/Linux-Common/","title":"Linux Common","text":""},{"location":"Linux/Linux-Common/#switch-to-users-shell-with-nologin","title":"Switch to user's shell with nologin","text":"<pre><code>### This account is currently not available\nsudo su -l www-data -s /bin/bash\n</code></pre>"},{"location":"Linux/Linux-Common/#ssh-and-scp-for-batch-mode-scripts","title":"SSH and SCP for batch mode scripts","text":"<p>This way it ignores password prompt (it fails) and DANGER fingerprint.</p> <pre><code>ssh -o BatchMode=yes -o PasswordAuthentication=no -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ... &lt;user&gt;@&lt;server&gt;\nscp -q -o BatchMode=yes -o PasswordAuthentication=no -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null &lt;src&gt; &lt;dst&gt;\n</code></pre>"},{"location":"Linux/Linux-Common/#ssh-client-config-when-fw-dropping-inactive-connections","title":"SSH client config when FW dropping inactive connections","text":"<p>~/.ssh/config</p> <pre><code>Host *\nServerAliveInterval 20\nServerAliveCountMax 3\nTCPKeepAlive no\n</code></pre>"},{"location":"Linux/Linux-Common/#locale","title":"Locale","text":"<p>Generate missing locales</p> <pre><code>locale-gen en_US.UTF-8\n</code></pre> <p>Alternatively a locale file can be created manually</p> <pre><code>localedef -i en_US -f UTF-8 en_US.UTF-8\n</code></pre> <p>Then setup</p> <pre><code>export LANGUAGE=en_US.UTF-8\nexport LANG=en_US.UTF-8\nexport LC_ALL=en_US.UTF-8\nlocale-gen en_US.UTF-8\ndpkg-reconfigure locales\n</code></pre> <p>And / or</p> <pre><code>echo 'LANGUAGE=\"en_US.UTF-8\"' &gt;&gt; /etc/default/locale\necho 'LC_ALL=\"en_US.UTF-8\"' &gt;&gt; /etc/default/locale\n</code></pre>"},{"location":"Linux/Linux-Common/#timezone","title":"Timezone","text":"<pre><code>dpkg-reconfigure tzdata\n8. Europe\n39. Prague\n</code></pre>"},{"location":"Linux/Linux-Common/#date-and-time","title":"Date and Time","text":"<pre><code>date -s '2023-01-21 13:33:11'\nhwclock --systohc\ntimedatectl\n</code></pre>"},{"location":"Linux/Linux-Common/#tcpdump","title":"Tcpdump","text":"<pre><code>tcpdump -nli eth0 -s 0 -U -w /root/tcpdump_$(date +\"%d%m%Y_%H%M%S\")_$(hostname).dmp host IP_ADDRESS\n    ### BETTER - print ascii &amp; data only to terminal &amp; all to file\ntcpdump -nli eth0 -A -s 0 -U -w /root/tcpdump_$(date +\"%d%m%Y_%H%M%S\")_$(hostname).dmp port TCP_PORT --print\n</code></pre> <ul> <li>n - don't lookup DNS names</li> <li>l - buffered output (for tail, etc ...)</li> <li>i - interface</li> <li>s 0 - store whole packets (default is 68 bytes only)</li> <li>w - store RAW packets to file instead of stdout (can be printed later using -r)</li> <li>U - do not buffer, store packets as they arrive</li> </ul> <p>For Ethereal/Wireshark in case of SSL (not PFS) in Settings &gt; SSL protocol set in RSA key list <code>server IP</code>, <code>port</code>, <code>ssl key</code> and protocol <code>http</code>. Then use <code>Follow TCP stream</code>.</p>"},{"location":"Linux/Linux-Common/#start-something-after-boot-legacy-examples","title":"Start something after boot - Legacy examples","text":"<p>/etc/rc.local</p> <pre><code>/root/startOnBoot.sh &amp;&gt; /tmp/startOnBoot.log\nexit 0   ### end of rc.local\n</code></pre> <p>Or run script with environment setup</p> <pre><code>nohup su root --shell /bin/bash --command \"/root/vncserver.sh start &gt; /tmp/vncserver.sh.log\" &amp;\nexit 0   ### end of rc.local\n</code></pre> <p>/root/startOnBoot.sh</p> <pre><code>#!/bin/bash\n\n### Run under user\n/sbin/runuser -l jr -c 'vncserver -localhost no' &amp;&gt; /home/${USER}/vncserver.start.from.root\n### Run under root with security limits.conf applied (probably bug)\nsu root --shell /bin/bash --command \"/bin/stunnel /etc/stunnel/stunnel.conf\"\n</code></pre> <p>Beware of <code>-localhost no</code> which setup vnc to listen on ALL interfaces.</p>"},{"location":"Linux/Linux-Common/#set-http-proxy-environment-curl-wget","title":"Set HTTP proxy (environment, curl, wget)","text":"<p>/etc/environment</p> <pre><code>export http_proxy=\"http://${HOST}:${PORT}/\"\nexport https_proxy=\"http://${HOST}:${PORT}\"\nexport no_proxy=\"localhost,127.0.0.1,localaddress,.localdomain.com\"\nexport HTTP_PROXY=\"http://${HOST}:${PORT}/\"\nexport HTTPS_PROXY=\"http://${HOST}:${PORT}/\"\nexport NO_PROXY=\"localhost,127.0.0.1,localaddress,.localdomain.com\"\n</code></pre> <p>~/.curlrc</p> <pre><code>proxy=${HOST}:${PORT}\n</code></pre> <ul> <li><code>--noproxy '*'</code></li> <li><code>--proxy ${HTTP_PROXY}</code></li> </ul> <p>~/.wgetrc</p> <pre><code>use_proxy = on\nhttps_proxy = http://${HOST}:${PORT}/\nhttp_proxy = http://${HOST}:${PORT}/\nftp_proxy = http://${HOST}:${PORT}/\n</code></pre> <p>Java</p> <pre><code>export JAVA_OPTS=\"-Dhttps.proxyHost=${HOST} -Dhttps.proxyPort=${PORT}\"\nexport JAVA_FLAGS=\"-Dhttps.proxyHost=${HOST} -Dhttps.proxyPort=${PORT}\"\n</code></pre>"},{"location":"Linux/Linux-Common/#curl-post-binary-to-web-form","title":"curl - post binary to WEB form","text":"<pre><code>curl -v -F uploadBtn=Upload -F uploadedFile=@IMAGE_098.jpg https://some.domain.cz/upload.php\n</code></pre>"},{"location":"Linux/Linux-Common/#curl-set-timeouts","title":"curl - set timeouts","text":"<pre><code>CURL=\"/usr/bin/curl --connect-timeout 5 --max-time 10\"\n### Then use like\n${CURL} -s -H \"Content-type: application/json; charset=UTF-8\" ...\n</code></pre>"},{"location":"Linux/Linux-Common/#disable-auto-lock-screen-autolock-screensaver","title":"Disable auto-lock, screen autolock, screensaver","text":"<pre><code>apt purge light-locker\n</code></pre>"},{"location":"Linux/Linux-Common/#enable-auto-login","title":"Enable auto-login","text":"<p>/etc/lightdm/lightdm.conf</p> <pre><code>[Seat:*]\n#type=local\n...\nautologin-user=doma\nautologin-user-timeout=5\n</code></pre> <p>/etc/gdm3/custom.conf</p> <pre><code>[daemon]\nAutomaticLoginEnable=True\nAutomaticLogin=username\n</code></pre>"},{"location":"Linux/Linux-Common/#show-information-about-hw-hardware-model-etc","title":"Show information about HW, Hardware model etc","text":"<pre><code>dmidecode | grep -A3 '^System Information'\n</code></pre>"},{"location":"Linux/Linux-Common/#find-network-ethernet-pci-id-name","title":"Find Network Ethernet PCI ID name","text":"<pre><code>grep PCI_SLOT_NAME /sys/class/net/*/device/uevent\n</code></pre>"},{"location":"Linux/Linux-Common/#backup-restore-package-versions","title":"Backup / Restore package versions","text":"<p>Backup current version of all installed packages</p> <pre><code>sudo apt install dpkg-dev\ntouch ~/installed_packages.txt\ndpkg-query -l &gt; ~/installed_packages.txt\n</code></pre> <p>Reinstall versions later</p> <pre><code>sudo dpkg --clear-selections\nsudo dpkg --set-selections &lt; ~/installed_packages.txt\nsudo apt-get dselect-upgrade\n</code></pre>"},{"location":"Linux/Linux-Common/#check-3d-acceleration-is-working-hwvm","title":"Check 3D-Acceleration is working (HW/VM)","text":"<pre><code>apt install mesa-utils nux-tools\n/usr/lib/nux/unity_support_test -p   ### ALL must be yes\nglxinfo -B   ### must be Device: virgl (Apple ... neco ...)\n</code></pre>"},{"location":"Linux/Linux-Common/#turn-off-resising-of-inodes-on-fs","title":"Turn OFF resising of inodes on FS","text":"<pre><code>tune2fs -O ^resize_inode /dev/md0\n</code></pre>"},{"location":"Linux/Linux-Common/#youtube-downloader","title":"Youtube Downloader","text":"<p>Download best video and audio quality Install using pip <code>pip3 install --upgrade youtube-dl</code> Or install manually youtube-dl. For merge <code>ffmpeg</code> or <code>avconv</code> are needed. Then use it like:</p> <pre><code>./youtube-dl -f bestvideo+bestaudio \"URL\"\n</code></pre>"},{"location":"Linux/Linux-Cron/","title":"Linux Cron","text":""},{"location":"Linux/Linux-Cron/#run-command-in-specific-user-environment","title":"Run command in specific user environment","text":"<pre><code>* * * * * /usr/bin/bash -l -c &lt;command&gt;\n</code></pre>"},{"location":"Linux/Linux-Cron/#simulate-cron-execution","title":"Simulate cron execution","text":"<p>Store CRON environment entries and run script as cron with it.</p> <pre><code>* * * * *   /usr/bin/env &gt; /tmp/cron-env\n</code></pre> <p>Let's have a testing script <code>runAsCron.sh</code> with this content</p> <pre><code>#!/bin/bash\n/usr/bin/env -i $(cat /tmp/cron-env) \"$@\"\n</code></pre> <p>Then simulate run as if it were in crontab</p> <pre><code>./runAsCron.sh /path/to/script-for-debug.sh --with params ...\n</code></pre>"},{"location":"Linux/Linux-HomeCA/","title":"Linux Home CA (Certification Authority)","text":"<p>No need to install any software. I am using openssl only with small helper script.</p>"},{"location":"Linux/Linux-HomeCA/#create-ca","title":"Create CA","text":"<pre><code>mkdir -p ca/ca-cert\ncd ca/ca-cert\n\n### Create CA key:\nopenssl genrsa -out ca.key 4096\n\n### Create CA cert:\nexport SUBJ=\"/C=CZ/ST=Some State/L=City/O=HomeCA/CN=MyCN/emailAddress=myEmail\"\nopenssl req -x509 -new -nodes -key ca.key -sha256 -days 14600 -out ca.crt -subj \"$SUBJ\"\n\ncd ../\n</code></pre>"},{"location":"Linux/Linux-HomeCA/#create-helper-script","title":"Create helper script","text":"<p>Save this script as <code>createCertificate.sh</code></p> <pre><code>#!/bin/bash\n\nCERT=\"${1}\"\nTYPE=\"${2}\"\nDAYS=\"3650\"\nCA_KEY=\"ca-cert/ca.key\"\nCA_CRT=\"ca-cert/ca.crt\"\nCERTS=\"certs\"\n\nif [ -z \"${CERT}\" ] || [ -z \"${TYPE}\" ]\nthen\n    echo \"USAGE\n        ### Create file with subject for certificate (vpn-custom-routes)\n        $0 &lt;file with SUBJECT line for new certificate&gt; &lt;c|s&gt; (client|server)\n\"\n    echo \"EXAMPLE: $0 vpn-server s\"\n    echo \"EXAMPLE: $0 vpn-custom-routes c\"\n    echo \"EXAMPLE: $0 www-some-client-cert c\"\n    exit 1\nfi\n\nif [ ! -f ${CERT} ]\nthen\n    echo \"ERROR: File ${CERT} does NOT exists!\"\n    exit 1\nfi\n\nmkdir ${CERTS} &amp;&gt; /dev/null\ntest -d ${CERTS} || { echo \"Folder ${CERTS} does NOT exists! Exitting ...\"; exit 1; }\n\nif [ -f ${CERTS}/${CERT}.key ]\nthen\n    echo \"ERROR: Key for ${CERT} already exists!\"\n    exit 1\nfi\n\nSUBJ=$(cat ${CERT})\n\necho \"Subject: $SUBJ\"\necho \"Generating key ...\"\nopenssl genrsa -out ${CERTS}/${CERT}.key 4096\necho \"Generating csr ...\"\nopenssl req -new -key ${CERTS}/${CERT}.key -out ${CERTS}/${CERT}.csr -subj \"$SUBJ\"\necho \"Generating (${TYPE}) certificate ...\"\n\nif [ $TYPE == \"c\" ]\nthen\n    openssl x509 -req -in ${CERTS}/${CERT}.csr -CA ${CA_CRT} -CAkey ${CA_KEY} -CAcreateserial -out ${CERTS}/${CERT}.crt -days ${DAYS} -sha256 -extfile &lt;(cat &lt;&lt;EOF\nbasicConstraints=CA:FALSE\nkeyUsage=digitalSignature\nextendedKeyUsage=clientAuth\nEOF\n)\nfi\n\nif [ $TYPE == \"s\" ]\nthen\n    openssl x509 -req -in ${CERTS}/${CERT}.csr -CA ${CA_CRT} -CAkey ${CA_KEY} -CAcreateserial -out ${CERTS}/${CERT}.crt -days ${DAYS} -sha256 -extfile &lt;(cat &lt;&lt;EOF\nbasicConstraints=CA:FALSE\nkeyUsage=digitalSignature,keyEncipherment\nextendedKeyUsage=serverAuth\nEOF\n)\nfi\n\nopenssl x509 -in ${CERTS}/${CERT}.crt -text | grep After\nls -l ${CERTS}/${CERT}*\n</code></pre>"},{"location":"Linux/Linux-HomeCA/#create-subject-files-for-certificates","title":"Create subject files for certificates","text":"<pre><code>echo \"/C=CZ/ST=Some State/L=City/O=HomeCA/CN=MyVPNHomeServer/emailAddress=myEmail\" &gt; vpn-server\necho \"/C=CZ/ST=Some State/L=City/O=HomeCA/CN=MyClientCertificate/emailAddress=myEmail\" &gt; www-my-selfsigned-client-cert\n</code></pre>"},{"location":"Linux/Linux-HomeCA/#create-example-server-certificate","title":"Create example server certificate","text":"<pre><code>./createCertificate.sh vpn-server s\n</code></pre>"},{"location":"Linux/Linux-HomeCA/#create-example-client-certificate","title":"Create example client certificate","text":"<pre><code>./createCertificate.sh www-my-selfsigned-client-cert c\n</code></pre>"},{"location":"Linux/Linux-Parsing/","title":"Linux Parsing","text":""},{"location":"Linux/Linux-Parsing/#multiline-parsing","title":"Multiline parsing","text":"<p>Parse section beginning with <code>[ERROR</code> and ends where new line begins next <code>[</code></p> <pre><code>sed -n '/^\\[ERROR/,/^\\[/p' app.log\n</code></pre> <p>Parse all sections beginning with regexp <code>^--.*-A--$</code> and create file for every section named <code>MODSEC_&lt;number&gt;</code></p> <pre><code>awk '/^--.*-A--$/ {x=\"MODSEC_\"++i}; i &gt; 0 {print &gt; x}' modsec_audit.log\n</code></pre> <p>Find first occurence of ${D} and get all content to the end of the file</p> <pre><code>D=$(date \"+%Y-%m-%d %H:%M:\" --date='1 mins ago')\nsed -n '/'\"$D\"'/,$p' app.log\n</code></pre>"},{"location":"Linux/Linux-Parsing/#jq-json-parser","title":"jq - JSON parser","text":"<pre><code>{\n    \"data\": [\n        {\n            \"type\": \"vzmigrate\",\n            \"user\": \"root@pam\",\n            \"id\": \"101\",\n            \"endtime\": 1716975183,\n            \"status\": \"OK\",\n            \"node\": \"vpvecommon3\",\n            \"upid\": \"UPID:vpvecommon3:00397036:766AAF6F:6656F611:vzmigrate:101:root@pam:\",\n            \"saved\": \"1\",\n            \"starttime\": 1716975121\n        },\n        {\n            \"status\": \"migration aborted\",\n            \"node\": \"vpvecommon3\",\n            \"upid\": \"UPID:vpvecommon3:00396F69:766A9641:6656F5D0:vzmigrate:101:root@pam:\",\n            \"saved\": \"1\",\n            \"starttime\": 1716975056,\n            \"type\": \"vzmigrate\",\n            \"user\": \"root@pam\",\n            \"endtime\": 1716975056,\n            \"id\": \"101\"\n        }\n    ]\n}\n</code></pre> <p>Parse element conditionally</p> <pre><code> jq '.data[] | select(.type == \"vzmigrate\" and .saved == \"0\")'\n</code></pre> <p>Parse element conditionally and return one key</p> <pre><code>jq -r '.data[] | select(.type == \"vzmigrate\" and .saved == \"0\") | .upid'\n</code></pre> <p>Parse element conditionally and return more keys using more formats</p> <pre><code>jq -r '.data[] | select(.type == \"vzmigrate\" and .saved == \"0\") | {upid, user}'           ### JSON\njq -r '.data[] | select(.type == \"vzmigrate\" and .saved == \"0\") | \"\\(.upid)\\t\\(.user)\"'   ### Separated using TABs\njq -r '.data[] | select(.type == \"vzmigrate\" and .saved == \"0\") | \"\\(.upid)---\\(.user)\"'  ### Separated using 3 hyphens (---)\n</code></pre>"},{"location":"Linux/Linux-Rescue/","title":"Linux Rescue","text":""},{"location":"Linux/Linux-Rescue/#tools","title":"Tools","text":"<ul> <li>SystemRescueCD</li> <li>Imager Tool G4L (EFI version)</li> <li>CloneZilla</li> </ul>"},{"location":"Linux/Linux-Rescue/#useful-info-command","title":"Useful info command","text":"<pre><code>cat /proc/mdstat\npvdisplay -m\nvgdisplay -A -v\ntestdisk /list\n</code></pre>"},{"location":"Linux/Linux-Rescue/#fsck-on-lvm","title":"FSCK on LVM","text":"<pre><code>lvscan\n</code></pre> <p>In case of INACTIVE devices, make them ACTIVE if you know what you are doing</p> <pre><code>lvchange -ay /dev/vg_root/var\nfsck /dev/vg_root/var\n</code></pre>"},{"location":"Linux/Linux-Rescue/#rescue","title":"Rescue","text":"<p>Usually boot from USB and fix MBR, GRUB, ...</p> <ul> <li>System Rescue Download and How-Tos on System Rescue Homepage</li> </ul> <p>Using System Rescue</p> <pre><code>root@sysresccd /root % fsarchiver probe simple\n[=====DEVICE=====] [==FILESYS==] [=====LABEL=====] [====SIZE====] [MAJ] [MIN]\n[/dev/sda1       ] [ext3       ] [boot           ] [   256.00 MB] [  8] [  1]\n[/dev/sda2       ] [reiserfs   ] [debian         ] [    16.00 GB] [  8] [  2]\n[/dev/sda3       ] [ntfs       ] [winxp32        ] [    16.00 GB] [  8] [  3]\n</code></pre> <p>FS structure</p> <pre><code>sda2 /\nsda3 /tmp\nsda4 /home\n</code></pre> <p>Check root FS - sda2</p> <pre><code>root@sysresccd /root % mkdir -p /mnt/linux\nroot@sysresccd /root % mount -r /dev/sda2 /mnt/linux\nroot@sysresccd /root % ls -l /mnt/linux/sbin/init\n-rwxr-xr-x 1 root root 37384 2008-08-12 15:20 /mnt/linux/sbin/init\nroot@sysresccd /root % umount /mnt/linux\n</code></pre> <p>Check boot FS - if it's on different partition than sda2</p> <pre><code>root@sysresccd /root % mkdir -p /mnt/boot\nroot@sysresccd /root % mount -r /dev/sda1 /mnt/boot\nroot@sysresccd /root % ls -l /mnt/boot\nlrwxrwxrwx 1 root root        1 2008-08-05 22:46 boot -&gt; .\n-rw-r--r-- 1 root root    98203 2009-10-27 10:05 config-2.6.30-bpo.2-amd64\ndrwxr-xr-x 2 root root     2800 2009-11-12 19:38 grub\n-rw-r--r-- 1 root root  8198587 2009-11-08 14:59 initrd.img-2.6.30-bpo.2-amd64\ndrwx------ 2 root root       48 2006-11-25 15:55 lost+found\n-rw-r--r-- 1 root root  1508757 2009-10-27 10:05 System.map-2.6.30-bpo.2-amd64\n-rw-r--r-- 1 root root  2224064 2009-10-27 10:04 vmlinuz-2.6.30-bpo.2-amd64\nroot@sysresccd /root % umount /mnt/boot\n</code></pre> <p>GRUB fix - boot FS is same as root FS - sda2</p> <pre><code>root@sysresccd /root % mkdir /mnt/linux\nroot@sysresccd /root % mount /dev/sda2 /mnt/linux\nroot@sysresccd /root % mount -o bind /proc /mnt/linux/proc\nroot@sysresccd /root % mount -o bind /dev /mnt/linux/dev\nroot@sysresccd /root % mount -o bind /sys /mnt/linux/sys\nroot@sysresccd /root % chroot /mnt/linux /bin/bash\n/usr/sbin/grub-install /dev/sda\nexit\n\nroot@sysresccd /root % umount /mnt/linux/{dev,proc,sys}\nroot@sysresccd /root % umount /mnt/linux/boot\nroot@sysresccd /root % umount /mnt/linux/\nreboot\n</code></pre> <p>You can use Debian Netinst iso for repair.</p> <ul> <li>Download and convert to DMG under macOS</li> <li>Insert USB Flash</li> <li><code>diskutil list</code> to see disk number</li> <li><code>diskutil unmountDisk /dev/diskX</code> to just unmount</li> <li>DANGER <code>sudo dd if=debian-8.3.0-amd64-netinst.img.dmg of=/dev/rdiskX bs=1m</code></li> <li>Boot from USB, mount <code>root fs</code> (assemble RAID if needed and then ...vg0/root/ ...)</li> <li>Install GRUB to both disk in case of RAID (/dev/sda and /dev/sdb)</li> <li> <ul> <li><code>fsck ...</code></li> </ul> </li> <li>REBOOT</li> <li> <ul> <li><code>fsck ...</code></li> </ul> </li> </ul> <p><code>/dev/md0</code> (if it's /boot) can be unmounted always and checked anytime <code>/dev/md1</code> (if it's root LVM) can not be checked anytime - boot from live CD</p>"},{"location":"Linux/Linux-Rescue/#recovery-of-data-on-nas-with-custom-blocksize","title":"Recovery of data on NAS with custom blocksize","text":"<p>All recovery tools were refusing to do anything with that HDD. Only way how I can access it was this</p> <pre><code>debugfs\nopen -b 65536 /dev/md2\nls\ncd /path/to/data\nrdump \"MyData\" /path/to/mounted/2nd_disk\n########################################################################\n   -b blocksize\n          Forces the use of the given block size (in bytes) for the file\n          system, rather than detecting the correct block size\n          automatically.  (This option is rarely needed; it is used\n          primarily when the file system is extremely badly\n          damaged/corrupted.)\n</code></pre>"},{"location":"Linux/Linux-Security/","title":"Linux Security stuff","text":""},{"location":"Linux/Linux-Security/#ssh-key-upgrade-to-ed25519","title":"SSH Key upgrade to ED25519","text":"<p>Ed25519 is the most recommended public-key algorithm available today. To check all available SSH keys on your computer:</p> <pre><code>for i in ~/.ssh/id_*; do ssh-keygen -l -f \"${i}\"; done | uniq\n</code></pre> <p>Generate new key:</p> <pre><code>ssh-keygen -o -a 100 -t ed25519 -f ~/.ssh/id_ed25519 -C \"user@email.info\"\n</code></pre> <p>If you\u2019re using macOS Sierra 10.12.2 or later, to load the keys automatically and store the passphrases in the Keychain, you need to configure your ~/.ssh/config file:</p> <pre><code>Host *\nAddKeysToAgent yes\nUseKeychain yes\nIdentityFile ~/.ssh/id_ed25519\nIdentityFile ~/.ssh/id_rsa   ### If you want to keep old key\n</code></pre> <p>Add the private-key to the SSH agent if you are using:</p> <pre><code>eval \"$(ssh-agent -s)\"   ### running ?\nssh-add -K ~/.ssh/id_ed25519\n</code></pre>"},{"location":"Linux/Linux-Security/#add-password-to-grub","title":"Add password to GRUB","text":"<p>Generate password with</p> <pre><code>grub-mkpasswd-pbkdf2\n</code></pre> <p>On the END of the <code>/etc/grub.d/00_header</code> add password like this</p> <pre><code>cat &lt;&lt; EOF\nset superusers=\"${USER}\"\npassword_pbkdf2 ${USER} grub.pbkdf2.sha512.10000.4BFE57123A87...1AKJBS4SA3A5FA....\nEOF\n</code></pre> <p>Allow boot without password. Password will be only for GRUB edit. Add <code>--unrestricted</code> do obou menuentry v <code>/etc/grub.d/10_linux</code> (update of OS can change this file and remove it so check it after update)</p> <pre><code>[...]\necho \"menuentry '$(echo \"$title\" | grub_quote)' --unrestricted ${CLASS} \\$menuentry_id_option 'gnulinux-$version-$type-$boot_device_id' {\" | sed \"s/^/$submenu_indentation/\"\nelse\necho \"menuentry '$(echo \"$os\" | grub_quote)' --unrestricted ${CLASS} \\$menuentry_id_option 'gnulinux-simple-$boot_device_id' {\" | sed \"s/^/$submenu_indentation/\"\n[...]\n</code></pre>"},{"location":"Linux/Linux-Systemd/","title":"Linux Systemd","text":""},{"location":"Linux/Linux-Systemd/#basics","title":"Basics","text":"<pre><code>sudo systemctl daemon-reload\nsudo systemctl enable some.service\nsudo systemctl start some.service\nsudo systemctl is-active some.service\nsudo systemctl restart some.service\nsudo systemctl stop some.service\nsudo systemctl cat some.service\nsudo systemctl disable some.service\n</code></pre>"},{"location":"Linux/Linux-Systemd/#remove-service","title":"Remove service","text":"<p>Stop and Disable service.</p> <pre><code>rm /etc/systemd/system/SERVICE_NAME\nrm /usr/lib/systemd/system/SERVICE_NAME\nsystemctl daemon-reload\nsystemctl reset-failed\n</code></pre>"},{"location":"Linux/Linux-Systemd/#journalctl-show-log-of-service","title":"journalctl - show log of service","text":"<p>TAIL LOG</p> <pre><code>journalctl -f -u SERVICE_NAME.service\n</code></pre> <p>Show all log messages</p> <pre><code>journalctl -u SERVICE_NAME.service\n</code></pre> <p>Just since boot</p> <pre><code>journalctl -b -u SERVICE_NAME.service\n</code></pre> <p>cat like style</p> <pre><code>journalctl -b --no-pager -u SERVICE_NAME.service\n</code></pre> <p>Show log from the END</p> <pre><code>journalctl -b -e -u SERVICE_NAME.service\n</code></pre> <p>cat RAW log (same way as process)</p> <pre><code>journalctl -f -b -u SERVICE_NAME.service -o cat\n</code></pre>"},{"location":"Linux/Linux-Systemd/#journald-maintenance","title":"journald maintenance","text":"<p>Maintenance of <code>/var/log/journal/4c74c042939f4af8971cc0decb93d3d8/...</code> for example.</p> <pre><code>journalctl --disk-usage\njournalctl --vacuum-size=500M\n</code></pre> <p>Set desired values in <code>/etc/systemd/journald.conf</code></p> <pre><code>SystemMaxUse=1024M\nMaxRetentionSec=1month\n</code></pre> <p>And restart daemon <code>systemctl restart systemd-journald.service</code>. More info on SO</p>"},{"location":"Linux/Linux-Systemd/#edit-existing-unit","title":"Edit existing unit","text":"<pre><code>systemctl edit --full systemd-networkd-wait-online.service\n</code></pre> <p>Add TimeoutStartSec=5 in <code>[Service]</code> section, if Ubuntu start taking forever ...</p>"},{"location":"Linux/Linux-Systemd/#bash-script-to-unit-altserver-example","title":"BASH script to unit - AltServer example","text":"<p>altserver.service</p> <pre><code>[Unit]\nDescription=Alt Server\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nUser=root\nGroup=root\nType=simple\nTimeoutStartSec=30\nRestart=on-failure\nRestartSec=30s\nWorkingDirectory=/root\nExecStart=/root/runAltLinux.sh\nSyslogIdentifier=AltServer\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>runAltLinux.sh</p> <pre><code>#!/bin/bash\n\nwhile true\ndo\n    RUN_DATE=$(date +\"%Y%m%d_%H%M%S\")\n    RUN_SESSION=\"alt_${RUN_DATE}\"\n    tmux new-session -d -s \"${RUN_SESSION}\"\n    tmux send-keys -t \"${RUN_SESSION}:0\" \"while true ; do python3 main.py ; sleep 30 ; echo ; echo ; echo ; done\" Enter\n    sleep infinity\n    sleep 2147483647\ndone\n</code></pre>"},{"location":"Linux/Linux-Tmux/","title":"Linux TMUX","text":""},{"location":"Linux/Linux-Tmux/#tmuxconf","title":".tmux.conf","text":"<p>screen user here ... ~/.tmux.conf</p> <pre><code>unbind C-b\nset -g prefix C-a\nbind C-a send-prefix\nbind-key C-a last-window\n</code></pre>"},{"location":"Linux/Linux-Tmux/#sessions","title":"Sessions","text":"<ul> <li>Connect to first available <code>tmux a</code></li> <li>List <code>tmux ls</code></li> </ul> <p>Output</p> <pre><code>0: 1 windows (created Tue May 17 18:48:13 2011) [80x23]\n5: 4 windows (created Tue May 17 18:55:09 2011) [80x23] (attached)\n</code></pre> <ul> <li>Connect to sesion 5 <code>tmux a -t 5</code></li> </ul>"},{"location":"Linux/Linux-Tmux/#basic-control-after-remap-to-screen-like-behaviour","title":"Basic control after remap to screen-like behaviour","text":"<pre><code>Ctrl-a c   new window\nCtrl-a n   next window\nCtrl-a p   previous window\nCtrl-a ,   rename window\nCtrl-a w   show list of all windows\nCtrl-a f   find window\nCtrl-a :   switch to command mode\nCtrl-a d   detach\n</code></pre>"},{"location":"Linux/Linux-Tmux/#work-with-windows","title":"Work with windows","text":"<pre><code>Ctrl-a %   split screen horizontally\nCtrl-a \"   split screen vertically\nCtrl-a o   switch between windows\nCtrl-a {   move window to left\nCtrl-a }   move window to right\nCtrl-a q   show window numbers\n(when numbers are displayed, enter number to switch to that window)\n</code></pre>"},{"location":"Linux/Linux-Tmux/#advanced-control","title":"Advanced control","text":"<p>Prepare session with windows already opened</p> <pre><code>#!/bin/bash\ntmux new-session -d -s servers\n\ntmux new-window -t servers:1 -n 'Server1' 'ssh user@1.2.3.4'\ntmux new-window -t servers:2 -n 'Server2' 'ssh user@5.6.7.8'\ntmux new-window -t servers:3 -n 'Server3' 'ssh user@9.1.2.3'\n\ntmux select-window -t servers:1\ntmux attach-session -t servers\n</code></pre>"},{"location":"Linux/Linux-Tmux/#open-new-tmux-right-after-login","title":"Open new tmux right after login","text":"<ul> <li>Add <code>new-session</code> to <code>.tmux.conf</code></li> <li>Add <code>tmux attach</code> at the end of <code>.bash_profile</code></li> </ul>"},{"location":"Linux/Linux-UPSPowerWalker/","title":"Linux UPS Power Walker","text":""},{"location":"Linux/Linux-UPSPowerWalker/#model-powerwalker-vi-650-iec","title":"Model PowerWalker VI 650 IEC","text":"<ul> <li>USB version driver balzer_usb</li> <li>Driver find on networkupstools.org</li> </ul>"},{"location":"Linux/Linux-UPSPowerWalker/#installation-and-setup","title":"Installation and Setup","text":"<pre><code>apt-get install nut\n</code></pre>"},{"location":"Linux/Linux-UPSPowerWalker/#etcnutnutconf","title":"/etc/nut/nut.conf","text":"<pre><code>MODE=standalone\n</code></pre>"},{"location":"Linux/Linux-UPSPowerWalker/#etcnutupsconf","title":"/etc/nut/ups.conf","text":"<pre><code>[powerwalker]\n    driver = blazer_usb\n    port = auto\n    desc = \"PowerWalker UPS\"\n</code></pre>"},{"location":"Linux/Linux-UPSPowerWalker/#restart-server","title":"Restart server","text":"<pre><code>systemctl restart nut-server   ### OR upsdrvctl start\n</code></pre>"},{"location":"Linux/Linux-UPSPowerWalker/#etcnutupsdusers","title":"/etc/nut/upsd.users","text":"<pre><code>[local]\n    password = PASSWORD\n    upsmon master\n    actions = SET\n    instcmds = ALL\n</code></pre>"},{"location":"Linux/Linux-UPSPowerWalker/#etcnutupsmonconf","title":"/etc/nut/upsmon.conf","text":"<pre><code>...\nNOTIFYFLAG ONLINE       SYSLOG+WALL+EXEC\nNOTIFYFLAG ONBATT       SYSLOG+WALL+EXEC\nNOTIFYFLAG LOWBATT      SYSLOG+WALL+EXEC\nNOTIFYFLAG FSD          SYSLOG+WALL+EXEC\nNOTIFYFLAG COMMOK       SYSLOG+WALL+EXEC\nNOTIFYFLAG COMMBAD      SYSLOG+WALL+EXEC\nNOTIFYFLAG SHUTDOWN     SYSLOG+WALL+EXEC\nNOTIFYFLAG REPLBATT     SYSLOG+WALL+EXEC\nNOTIFYFLAG NOCOMM       SYSLOG+WALL+EXEC\nNOTIFYFLAG NOPARENT     SYSLOG+WALL+EXEC\n...\nMONITOR powerwalker@localhost 1 local PASSWORD master\nSHUTDOWNCMD \"sleep 5 ; /sbin/shutdown -h now\"\nNOTIFYCMD \"/usr/local/bin/upsNotify.sh\"\n# POWERDOWNFLAG /etc/killpower\n</code></pre>"},{"location":"Linux/Linux-UPSPowerWalker/#usrlocalbinupsnotifysh","title":"/usr/local/bin/upsNotify.sh","text":"<pre><code>#!/bin/bash\n\nEMAIL=\"someone@somewhere.cz\"\nLOG=\"/tmp/upsMessages.log\"\nU=$(whoami)\nMESSAGE=\"${U} @ $NOTIFYTYPE / ${1}.\"\nM_BATT=\"NAS will shutdown in 1 minute and cmd in 2 minutes.\"\nM_WALL=\"Wall power restored.\"\n\necho \"--------- $(date) ---------\" &gt;&gt; ${LOG}\necho \"${U} @ $NOTIFYTYPE / $1\" &gt;&gt; ${LOG}\n\nif [[ \"$NOTIFYTYPE\" =~ (ONBATT|LOWBATT|FSD|SHUTDOWN) ]]\nthen\n    ### Shutdown NAS in 1 minute\n    MESSAGE=\"${MESSAGE} ${M_BATT}\"\n    echo 'ssh -i /usr/local/bin/upsNotify.sh.id_rsa -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null USER@HOSTNAME_NAS \"sudo poweroff\"' | at now + \"1 minutes\"\n    echo 'sudo /sbin/poweroff' | at now + \"2 minutes\"\n    echo \"${MESSAGE}\" &gt;&gt; ${LOG}\n    atq &gt;&gt; ${LOG}\nfi\n\nif [[ \"$NOTIFYTYPE\" =~ (ONLINE) ]]\nthen\n    ### Cancel all scheduled poweroff jobs if any\n    MESSAGE=\"${MESSAGE} ${M_WALL}\"\n    echo \"Trying to cancel shutdowns ...\" &gt;&gt; ${LOG}\n    atq &gt;&gt; ${LOG}\n    for i in `atq | awk '{print $1}'` ; do atrm $i ; done\nfi\n\necho \"${MESSAGE}\" | mail -s \"UPS on cmd ($NOTIFYTYPE)\" ${EMAIL}\n\necho \"-----------------------------------------\" &gt;&gt; ${LOG}\n</code></pre>"},{"location":"Linux/Linux-UPSPowerWalker/#etcrclocal-disable-beeper","title":"/etc/rc.local - disable beeper","text":"<pre><code>upscmd -u local -p PASSWORD powerwal beeper.toggle &amp;\n</code></pre>"},{"location":"Linux/Linux-UPSPowerWalker/#start-nut-and-check-varlogdaemonlog","title":"Start NUT and check /var/log/daemon.log","text":"<pre><code>/etc/init.d/nut-server start  ### OR reboot\n</code></pre>"},{"location":"Linux/Linux-UPSPowerWalker/#runtime-settings","title":"Runtime settings","text":"<p>Command <code>upsc powerwalker</code></p> <pre><code>Init SSL without certificate database\nbattery.charge: 92\nbattery.voltage: 12.80\nbattery.voltage.high: 13.00\nbattery.voltage.low: 10.40\nbattery.voltage.nominal: 12.0\ndevice.type: ups\ndriver.name: blazer_usb\ndriver.parameter.pollinterval: 2\ndriver.parameter.port: auto\ndriver.version: 2.7.2\ndriver.version.internal: 0.11\ninput.current.nominal: 2.0\ninput.frequency: 50.3\ninput.frequency.nominal: 50\ninput.voltage: 228.4\ninput.voltage.fault: 228.4\ninput.voltage.nominal: 230\noutput.voltage: 228.4\nups.beeper.status: disabled\nups.delay.shutdown: 30\nups.delay.start: 180\nups.load: 6\nups.productid: 5161\nups.status: OL\nups.temperature: 25.0\nups.type: offline / line interactive\nups.vendorid: 0665\n</code></pre> <p>Command <code>upscmd -l powerwalker</code></p> <pre><code>Instant commands supported on UPS [powerwal]:\nbeeper.toggle - Toggle the UPS beeper\nload.off - Turn off the load immediately\nload.on - Turn on the load immediately\nshutdown.return - Turn off the load and return when power is back\nshutdown.stayoff - Turn off the load and remain off\nshutdown.stop - Stop a shutdown in progress\ntest.battery.start - Start a battery test\ntest.battery.start.deep - Start a deep battery test\ntest.battery.start.quick - Start a quick battery test\ntest.battery.stop - Stop the battery test\n</code></pre> <p>Disable beeper adhoc by <code>upscmd -u local -p PASSWORD powerwalker beeper.toggle</code></p>"},{"location":"OpenSSL/OpenSSL/","title":"OpenSSL","text":"<p>Cipher suite TLS_RSA_WITH_AES_128_CBC_SHA uses</p> <ul> <li>RSA as the key exchange algorithm</li> <li>AES_128_CBC (128 bits AES cipher algorithm in CBC mode) as the cipher (encryption) algorithm</li> <li>SHA-1 as the message digest algorithm for HMAC</li> </ul> <p><code>key exchange algorithm___cipher (encryption) algorithm___message digest algorithm</code></p>"},{"location":"OpenSSL/OpenSSL/#create-request-need-sign-by-ca","title":"Create Request (need sign by CA)","text":"<pre><code>openssl req -new -newkey rsa:2048 -sha256 -keyout certificate.pem -out certificate.req -nodes\nopenssl rsa -in certificate.pem -out certificate.key   ### convert PRIVATE KEY to RSA PRIVATE KEY\n</code></pre>"},{"location":"OpenSSL/OpenSSL/#create-self-signed-certificate","title":"Create Self-signed certificate","text":"<pre><code>openssl genrsa -out selfsigned.key 2048\nopenssl req -new -x509 -key selfsigned.key -out selfsigned.crt -days 3650 -subj /CN=www.mytest-domain.com\n</code></pre>"},{"location":"OpenSSL/OpenSSL/#convert-a-pfx-to-pem-base64","title":"Convert a PFX to PEM (Base64)","text":"<p>Key</p> <pre><code>openssl pkcs12 -in certificate.pfx -nocerts -out certificate.key\n    ### Remove password from key\n# openssl rsa -in certificate.key -out certificate-without-password.key\n</code></pre> <p>Cert</p> <pre><code>openssl pkcs12 -in certificate.pfx -clcerts -nokeys -out certificate.crt\n</code></pre>"},{"location":"OpenSSL/OpenSSL/#convert-pem-with-key-to-pkcs12","title":"Convert PEM with key to PKCS12","text":"<pre><code>openssl pkcs12 -export -out certificate.pfx -inkey certificate.key -in certificate.crt -certfile CACert.crt\n</code></pre>"},{"location":"OpenSSL/OpenSSL/#convert-pem-with-key-to-pkcs12-macos-version","title":"Convert PEM with key to PKCS12 - MacOS version","text":"<pre><code>openssl pkcs12 -export -inkey certificate.key -in certificate.crt -name WebPrivateClientAuth -certfile CACert.crt -out certificate.pfx\n# openssl pkcs12 -noout -info -in certificate.pfx   ### INFO about pfx\n</code></pre>"},{"location":"OpenSSL/OpenSSL/#check-if-cert-and-key-fits","title":"Check if cert and key fits","text":"<pre><code>openssl x509 -noout -modulus -in certificate.crt | openssl md5\n# 8a4282fa4e12f0a203b300cs33d0b91a\nopenssl rsa -noout -modulus -in certificate.key | openssl md5\n# 8a4282fa4e12f0a203b300cs33d0b91a\n</code></pre>"},{"location":"OpenSSL/OpenSSL/#check-if-cert-and-ca-fits","title":"Check if cert and CA fits","text":"<pre><code>openssl verify -verbose -CAfile CACert.crt certificate.crt\n</code></pre>"},{"location":"OpenSSL/OpenSSL/#add-ca-to-linux-java-keystore","title":"Add CA to Linux &amp; Java KeyStore","text":"<pre><code>cp CACert.crt /usr/local/share/ca-certificates/\nupdate-ca-certificates\n    ### Check if it's in system's java keystore\nfor i in $(find /etc/ -name cacerts) ; do file $i ; done\n    ### look for Java KeyStore, in Ubuntu it is /etc/ssl/certs/java/cacerts\nkeytool -list -keystore /etc/ssl/certs/java/cacerts -storepass changeit |&amp; head\nkeytool -list -keystore /etc/ssl/certs/java/cacerts -storepass changeit |&amp; grep ...\n</code></pre>"},{"location":"OpenSSL/OpenSSL/#convert-cert-no-key-from-p7b-to-pem","title":"Convert cert (no key) from P7B to PEM","text":"<pre><code>openssl pkcs7 -print_certs -in certificate.p7b -out certificate.cer\n</code></pre>"},{"location":"OpenSSL/OpenSSL/#convert-cert-from-der-to-pem","title":"Convert cert from DER to PEM","text":"<pre><code>openssl x509 -inform DER -in certificate.cer -out certificate.pem\n</code></pre>"},{"location":"OpenSSL/OpenSSL/#check-if-crl-file-is-ok-openssl-will-read-him-for-der-format","title":"Check if CRL file is OK (openssl will read him) for DER format","text":"<pre><code>if openssl crl -inform DER -noout -in actual.crl &amp;&gt;/dev/null ; then echo CRL_OK ; else echo CRL_ERROR ; fi\n</code></pre>"},{"location":"OpenSSL/OpenSSL/#convert-crl-from-pem-to-der","title":"Convert CRL from PEM to DER","text":"<pre><code>openssl crl -in crl.pem -outform DER -out crl.der\n</code></pre>"},{"location":"OpenSSL/OpenSSL/#check-crl-certificate-revocation-list","title":"Check CRL (certificate revocation list)","text":"<pre><code>openssl crl -inform DER -text -in actual.crl\nopenssl crl -inform PEM -text -in actual.crl\n</code></pre>"},{"location":"OpenSSL/OpenSSL/#talk-to-smtp-server-using-tls","title":"Talk to SMTP server using TLS","text":"<pre><code>    ### openssl s_client -starttls smtp -connect [HOST]:[PORT]\nopenssl s_client -starttls smtp -connect smtp.gmail.com:587\n</code></pre>"},{"location":"OpenSSL/OpenSSL/#debug-ssl-communication","title":"DEBUG SSL communication","text":"<pre><code>time (echo \"Test\" | openssl s_client -debug -connect HOST:PORT -servername HOST)\n</code></pre> <p>Performance test</p> <pre><code>openssl s_time -connect HOST:PORT\n</code></pre>"},{"location":"OpenSSL/OpenSSL/#debug-ssl-communication-using-java","title":"DEBUG SSL communication using Java","text":"<p>SSLPoke - install openjdk-19-jdk-headless</p> <pre><code>git clone https://github.com/MichalHecko/SSLPoke.git\ncd SSLPoke &amp;&amp; ./gradlew clean jar\njava -jar build/libs/SSLPoke-1.0.jar HOST PORT\njava -jar SSLPoke-1.0.jar HOST PORT\n    ### or\njava -Djavax.net.ssl.trustStore=trustStore.keystore -Djavax.net.ssl.trustStorePassword=123456 -jar ./SSLPoke-1.0.jar HOST PORT\n</code></pre>"},{"location":"OpenSSL/OpenSSL/#ssl-cipher-suite-tester","title":"SSL Cipher Suite Tester","text":"<pre><code>#!/bin/bash\n\nif [ -z \"${1}\" ] ; then echo \"USAGE: $0 hostname:port\" ; exit 1 ; fi\n\n### OpenSSL requires port number.\nSERVER=${1}\nDELAY=.1\n\nciphers=$(openssl ciphers 'ALL:eNULL' | sed -e 's/:/ /g')\n\necho\necho \"**********************************************************************\"\necho \"   Obtaining cipher list from $(openssl version).\"\necho \"**********************************************************************\"\necho\n\nfor cipher in ${ciphers[@]}\ndo\n\n    echo -n \"Testing $cipher...\"\n    result=$(echo -n | openssl s_client -cipher \"$cipher\" -connect $SERVER 2&gt;&amp;1)\n\n    if [[ \"$result\" =~ \":error:\" ]]\n    then\n        error=$(echo -n $result | cut -d':' -f6)\n        echo NO \\($error\\)\n    else\n        if [[ \"$result\" =~ \"Cipher is ${cipher}\" || \"$result\" =~ \"Cipher    :\" ]] ; then\n            echo YES\n        else\n            echo UNKNOWN RESPONSE\n            echo $result\n        fi\n    fi\n\n    sleep $DELAY\n\ndone\n</code></pre> <p>Usage</p> <pre><code>./ssl-tester.sh HOST:PORT\n</code></pre>"},{"location":"OpenSSL/OpenSSL/#apache-ssl-error-ca-signature-digest-algorithm-too-weak","title":"Apache SSL Error - CA signature digest algorithm too weak","text":"<p><code>[Thu Jun 03 ...] [ssl:info] [pid ...] [client ...] AH02276: Certificate Verification: Error (68): CA signature digest algorithm too weak [subject: CN=... / issuer: CN=... / serial: ... / notbefore: Dec  8 ... / notafter: Dec  8 ...]</code></p> <p>Lower security in <code>/etc/ssl/openssl.cnf</code> down to <code>CipherString = DEFAULT@SECLEVEL=1</code> from <code>=2</code></p>"},{"location":"PostgreSQL/PostgreSQL/","title":"PostgreSQL","text":""},{"location":"PostgreSQL/PostgreSQL/#install","title":"Install","text":"<pre><code>sudo apt install -y postgresql postgresql-contrib\n</code></pre>"},{"location":"PostgreSQL/PostgreSQL/#connect-as-system-user","title":"Connect as system user","text":"<pre><code>sudo -u postgres psql\n</code></pre>"},{"location":"PostgreSQL/PostgreSQL/#basic-db-commands","title":"Basic DB commands","text":"<ul> <li><code>\\du</code> - show users</li> <li><code>\\dn</code> - show schemas</li> <li><code>\\l</code> - show DBs</li> <li><code>\\c</code> - show current DB</li> <li><code>\\c new_db</code> - switch to new_db DB (but user is kept, use <code>SET ROLE keycloak;</code> if can)</li> <li><code>sudo -u keycloak psql</code> - connect as another user</li> <li><code>\\dt</code> - show tables in the public schema by default</li> <li><code>\\dt *.*</code> - show tables from all schemas</li> <li><code>\\d</code> - shows all tables, views, sequences, and indexes</li> </ul>"},{"location":"PostgreSQL/PostgreSQL/#handy-commands","title":"Handy commands","text":"<ul> <li><code>sudo -u OWNER psql -c \"\\dt *.*\" | grep OWNER$</code> - show tables for specified owner</li> </ul>"},{"location":"PostgreSQL/PostgreSQL/#dangerous-commands","title":"Dangerous commands","text":"<ul> <li><code>DROP ROLE username;</code> - delete user</li> <li><code>DROP DATABASE database_name;</code> - delete database</li> </ul>"},{"location":"PostgreSQL/PostgreSQL/#listen-on-all-interfaces","title":"Listen on ALL interfaces","text":"<p>Set in postgresql.conf option <code>listen_addresses = '*'</code> Set in pg_hba.conf option <code>host    all             all             0.0.0.0/0            scram-sha-256</code></p> <p>Reload config</p> <pre><code>SELECT pg_reload_conf();\n</code></pre> <p>If <code>listen_addresses</code> was changed - restart of server is needed. Set GOOD password for user postgres.</p>"},{"location":"PostgreSQL/PostgreSQL/#set-password-for-user-postgres","title":"Set password for user postgres","text":"<pre><code>sudo -u postgres psql\n\\password\n</code></pre>"},{"location":"VSCode/VSCode/","title":"Visual Studio Code","text":"<ul> <li>Sign in to GitHub account.</li> </ul>"},{"location":"VSCode/VSCode/#open-from-terminal-for-folder","title":"Open from terminal for folder","text":"<p>To shell profile on Mac add <code>alias code=\"open -a 'Visual Studio Code'\"</code>. Then open in terminal like <code>code .</code></p>"},{"location":"VSCode/VSCode/#shortcuts","title":"Shortcuts","text":"<ul> <li><code>CMD + J</code> - Hide terminal</li> <li><code>SHIFT + CMD + F</code> - Search (everywhere)</li> <li><code>SHIFT + CMD + E</code> - File explorer</li> <li><code>SHIFT + CMD + P</code> - Preferences</li> <li><code>SHIFT + CMD + O</code> - Search in code (variables, functions, ...)</li> <li><code>CTRL + SHIFT + G</code> - Open Source Control (git)</li> <li><code>CMD + P</code> - Search for a file by name, line, symbol ...</li> <li><code>SHIFT + CMD + B</code> - Build</li> <li><code>CMD + B</code> - Toggle file explorer</li> <li><code>CMD + D</code> - Select the next occurrence of the current word for multi-edit</li> <li><code>SHIFT + CMD + M</code> - Error in code tab</li> <li><code>CTRL + R</code> - Open Recent window + filtered search</li> <li><code>OPTION + SHIFT + UP/DOWN</code> - Duplicate the current line</li> </ul>"},{"location":"VSCode/VSCode/#extensions","title":"Extensions","text":"<ul> <li>vscode-icons</li> <li>Go</li> <li>Python</li> <li> <ul> <li>Python Debugger</li> </ul> </li> <li> <ul> <li>Pylance</li> </ul> </li> <li>Remote - SSH</li> <li> <ul> <li>Remote - SSH: Editing Configuration Files</li> </ul> </li> <li> <ul> <li>Remote Explorer</li> </ul> </li> <li>YAML</li> <li>Ansible</li> <li>Windsurf</li> </ul> <p><code>ansible</code> and <code>ansible-lint</code> is needed.  Install for macOS:</p> <pre><code>brew install ansible ansible-lint\n</code></pre> <ul> <li>Open Ansible Extension settings - <code>Command Palette</code> - fill <code>Settings</code>, open <code>Ansible: Open Ansible Extension Settings</code></li> <li> <ul> <li>in <code>Basic Configuration</code> enter path to Ansible binary: <code>/usr/local/bin/ansible</code></li> </ul> </li> </ul>"},{"location":"VSCode/VSCode/#ansible-lint-settings","title":"Ansible Lint Settings","text":"<p>Do not show long lines warning - create <code>.ansible-lint.yml</code> in the root of the repository with content:</p> <pre><code>skip_list:\n  - yaml[line-length]\n</code></pre>"},{"location":"VSCode/VSCode/#go-golang-do-not-format-on-typesave","title":"Go / golang - do not format on type/save","text":"<p><code>CMD + SHIFT + P</code> &gt; <code>settings.json</code> In case of remote development / Remote SSH choose <code>Open Remote Settings SSH</code> ...</p> <pre><code>{\n    \"[go]\": {\n        \"editor.formatOnType\": false,\n        \"editor.formatOnSave\": false,\n        \"editor.codeActionsOnSave\": {\n            \"source.organizeImports\": false\n        }\n    }\n}\n</code></pre>"},{"location":"VSCode/VSCode/#remote-ssh-development","title":"Remote SSH development","text":"<ul> <li>Install Visual Studio Code Remote Development Extension Pack</li> <li>Read Remote Development with VS Code on Mac in 5 simple steps</li> <li> <ul> <li>In Extensions search for remote development extension pack and install</li> </ul> </li> <li> <ul> <li>In the command pallete (<code>CMD + SHIFT + P</code>) select <code>Remote-SSH: Add New SSH Host...</code> and use user@hostname ...</li> </ul> </li> <li> <ul> <li>Select <code>Remote-SSH: Connect to Host...</code> from the Command Palette. From the drop-down choose the already added host</li> </ul> </li> <li> <ul> <li> <ul> <li>You can edit type of the server (Windows, Linux, Mac) in vscode settings (Code &gt; Preferences &gt; Settings) by updating <code>remote.SSH.remotePlatform</code> property</li> </ul> </li> </ul> </li> </ul>"},{"location":"VSCode/VSCode/#vscode-server-on-linux","title":"vscode-server on Linux","text":"<p>Home folder is <code>.vscode-server</code> Stop Server: <code>CMD + SHIFT + P</code> &gt; <code>Kill VS Code Server on Host</code></p> <ul> <li> <p>Sometimes I do it 2x or disconnect and try it again. It will start next time I connect or project is oppened.</p> <p>ps -elf | grep -i vscode-server kill $(pidof node)</p> </li> </ul> <p>In case HTTP proxy is needed for vscode-server</p> <pre><code>export HTTP_PROXY=http://proxy:port\nexport HTTPS_PROXY=${HTTP_PROXY}\n</code></pre>"},{"location":"VSCode/VSCode/#code-server-on-web","title":"Code-Server on WEB","text":"<ul> <li>code-server on github</li> </ul>"},{"location":"VSCode/VSCode/#install","title":"Install","text":"<p>This will install DEB package</p> <pre><code>curl -fsSL https://code-server.dev/install.sh | sh\n</code></pre> <p>Enable &amp; Start code-server</p> <pre><code>sudo systemctl enable --now code-server@${USER}\n</code></pre> <p>Or run it in foreground</p> <pre><code>code-server\n</code></pre>"},{"location":"VSCode/VSCode/#config","title":"Config","text":"<ul> <li>/home/${USER}/.config/code-server/config.yaml</li> </ul> <p>Warning! This configuration is for local private LAN or with usage of another authentication like required client certificate, because security of code-server is DISABLED using this:</p> <pre><code>bind-addr: 0.0.0.0:8888\n# auth: password\nauth: none\npassword: &lt;PASSWORD&gt;\ncert: false\n</code></pre>"},{"location":"VSCode/VSCode/#update","title":"Update","text":"<p>To update code-server, install the new version over the old version using one-liner in Install section. All user data is in <code>~/.local/share/code-server</code> so they are preserved between installations. My way:</p> <pre><code>### snapshot\nansible-playbook guest-dev.yml --tags updateVSCode\n### delete snapshot if everything works\n</code></pre>"},{"location":"VirtualBox/VirtualBox/","title":"VirtualBox","text":""},{"location":"VirtualBox/VirtualBox/#installation","title":"Installation","text":"<ul> <li>Download VirtualBox</li> <li>Download Debian Installer</li> <li>Create new VM and set Debian Installer image as CDROM</li> <li>Set Boot from CD</li> <li>Install system, set proxy/no-proxy, ...</li> </ul>"},{"location":"VirtualBox/VirtualBox/#export-of-vm-to-new-virtualbox-installation","title":"Export of VM to new VirtualBox installation","text":"<pre><code>VBoxManage list vms\nVBoxManage export \"Win 10\" -o ~/tmp/Win10.ova\nVBoxManage import ...\n</code></pre>"},{"location":"VirtualBox/VirtualBox/#shrink-hdd","title":"Shrink HDD","text":"<p>Convert VMDK to VDI, compact VDI and then convert VDI to VMDK.</p> <pre><code>#!/bin/bash\n\nVMDK=\"win10-disk1.vmdk\"\nVMDKTMP=\"win10-disk1_tmp.vmdk\"\nVDI=\"temp.vdi\"\n\nVBoxManage showhdinfo \"$VMDK\" | grep -i uuid\n\necho\necho \"Can you see disk (first) UUID? Can we continue?\"\nread\n\necho\necho \"Converting to VDI ...\"\nVBoxManage clonehd \"$VMDK\" \"$VDI\" --format vdi\n\necho \"Compacting ...\"\nVBoxManage modifyhd \"$VDI\" --compact\n\necho \"Converting to VMDK ... delete [ $VMDK ] later!\"\n# rm \"$VMDK\"\nVBoxManage clonehd \"$VDI\" \"$VMDKTMP\" --format vmdk\n\necho\necho \"What was UUID for original VMDK disk? :\"\nread UU\n\nVBoxManage internalcommands sethduuid \"./$VMDKTMP\" \"$UU\"\n\nif mv \"$VMDKTMP\" \"$VMDK\"\nthen\n    ls -l\n    echo\n    echo \"Delete $VDI ?\"\n    read\n    rm \"$VDI\"\n    echo \"Delete [ $VMDK ] manually ...\"\nelse\n    echo \"ERROR ! Check terminal output.\"\nfi\n\nls -l\n</code></pre>"},{"location":"fail2ban/Fail2ban/","title":"fail2ban","text":""},{"location":"fail2ban/Fail2ban/#install","title":"Install","text":"<p>Package <code>fail2ban</code></p>"},{"location":"fail2ban/Fail2ban/#logs","title":"Logs","text":"<pre><code>tail -F /var/log/fail2ban.log\njournalctl -f -u fail2ban.service\n</code></pre>"},{"location":"fail2ban/Fail2ban/#commands","title":"Commands","text":""},{"location":"fail2ban/Fail2ban/#version","title":"Version","text":"<pre><code>fail2ban-client version\n</code></pre>"},{"location":"fail2ban/Fail2ban/#show-status-for-all-jails","title":"Show status for all jails","text":"<pre><code>for jail in `fail2ban-client status | grep \"Jail list\" | sed -E 's/^[^:]+:[ \\t]+//' | sed 's/,//g'` ; do echo \"&gt;&gt;&gt;&gt; $jail\" ; fail2ban-client get ${jail} banip --with-time ; echo ; done\n</code></pre>"},{"location":"fail2ban/Fail2ban/#get-all-banned-ip-address-for-jail","title":"Get all banned IP address for jail","text":"<pre><code>fail2ban-client get jail-name banip\n# fail2ban-client get jail-name banip | tr ' ' '\\n'\n</code></pre>"},{"location":"fail2ban/Fail2ban/#unban","title":"Unban","text":"<pre><code>fail2ban-client set JAIL_NAME unbanip IP_ADDRESS\n</code></pre>"},{"location":"fail2ban/Fail2ban/#setup","title":"Setup","text":"<p>fail2ban/jail.d/custom.conf</p> <pre><code>[DEFAULT]\nbantime  = 300\nfindtime = 300\nbanaction = iptables-allports\n</code></pre> <p>fail2ban/jail.d/apache-dos.conf</p> <pre><code>[apache-dos]\nenabled  = true\nport     = http,https\nfilter   = apache-dos\nlogpath  = /var/log/apache2/access.log\ndatepattern = %%d/%%b/%%Y:%%H:%%M:%%S %%z\nmaxretry = 20\nfindtime = 60\nbantime  = 24h\n</code></pre> <p>fail2ban/filter.d/apache-dos.conf</p> <pre><code># Fail2Ban filter to scan Apache access.log for DoS attacks\n\n[INCLUDES]\nbefore = common.conf\n\n[Definition]\n# Option:  failregex\n# Notes.:  regex to match GET requests in the logfile resulting in one of the\n#          following status codes: 401, 403, 404, 503.\n#          The host must be matched by a group named \"host\". The tag \"&lt;HOST&gt;\" \n#          can be used for standard IP/hostname matching and is only an alias for\n#          (?:::f{4,6}:)?(?P&lt;host&gt;[\\w\\-.^_]+)\n# Values:  TEXT\n#failregex = ^&lt;HOST&gt; .*\" (?!\\/robots\\.txt).*\" (400|401|403|404|503)\\s\nfailregex = ^&lt;HOST&gt; .* (400|401|403|404|405|503)\\s\n\n# Option:  ignoreregex\n# Notes.:  regex to ignore. If this regex matches, the line is ignored.\n# Values:  TEXT\n#\nignoreregex =\n</code></pre> <p>fail2ban/action.d/iptables-common.conf</p> <p>Replace both of</p> <ul> <li><code>blocktype = REJECT --reject-with icmp-port-unreachable</code></li> <li><code>blocktype = REJECT --reject-with icmp6-port-unreachable</code></li> </ul> <p>with</p> <ul> <li><code>blocktype = DROP</code></li> </ul> <p>fail2ban/filter.d/openvpn.conf</p> <pre><code># Fail2Ban filter for openvpn\n# For custom logs ...\n\n[INCLUDES]\n\n# Read common prefixes. If any customizations available -- read them from\n# common.local\nbefore = common.conf\n\n[Definition]\n\n_daemon = openvpn\n\nfailregex = ^%(__prefix_line)s&lt;HOST&gt;:[0-9][0-9]*.*possible active attack on the TCP.*$\n            ^%(__prefix_line)s&lt;HOST&gt;:[0-9][0-9]*.*VERIFY ERROR:.*$\n            ^%(__prefix_line)s&lt;HOST&gt;:[0-9][0-9]*.*TLS Auth Error:.*$\n            ^%(__prefix_line)s&lt;HOST&gt;:[0-9][0-9]*.*TLS Error: TLS handshake failed.*$\n\nignoreregex =\n</code></pre> <p>fail2ban/filter.d/sshd-tcpdos.conf</p> <pre><code># Fail2Ban ssh filter for TCP packet not related to SSH protocol\n#\n# Protect SSH port from TCP DOS, e.g. echo \"Some string\" | nc server 22, telnet ...\n\n[INCLUDES]\n\n# Read common prefixes. If any customizations available -- read them from\n# common.local\nbefore = common.conf\n\n[Definition]\n\n_daemon = sshd\n\nfailregex = ^%(__prefix_line)s.*Bad protocol version identification.*from &lt;HOST&gt; .*$\n\nignoreregex =\n</code></pre>"},{"location":"fail2ban/Fail2ban/#disable-whois-details-in-email-notification","title":"Disable WHOIS details in email notification","text":"<p>fail2ban/action.d/mail-whois-common.conf</p> <p>Replace</p> <ul> <li><code>_whois = whois &lt;ip&gt; ...</code></li> </ul> <p>with</p> <ul> <li><code>_whois = whois_disabledByAnsible &lt;ip&gt; || echo \"missing whois program\"</code></li> </ul>"},{"location":"iSH/iSH/","title":"iSH - iOS Linux Shell","text":""},{"location":"iSH/iSH/#setup","title":"Setup","text":"<pre><code>apk update\napk upgrade\napk add git openssh openssl vim tmux mc shadow cdrkit p7zip\nmkdir $HOME/.ssh\nchmod 700 $HOME/.ssh\ntouch $HOME/.ssh/authorized_keys\nchmod 600 $HOME/.ssh/authorized_keys\ntouch $HOME/.ssh/id_rsa\nchmod 600 $HOME/.ssh/id_rsa\ntouch $HOME/.ssh/id_rsa.pub\nchmod 644 $HOME/.ssh/id_rsa.pub\n</code></pre> <p>Change shell to BASH - run <code>chsh</code> and enter <code>/bin/bash</code> Set password for root - run <code>passwd</code></p>"},{"location":"iSH/iSH/#profiles","title":".profiles","text":"<pre><code>echo \"alias ll='ls -l'\" &gt;&gt; ~/.profile\necho \"alias b='~/ish-app/background.sh'\" &gt;&gt; ~/.profile\n</code></pre>"},{"location":"iSH/iSH/#tmuxconf","title":".tmux.conf","text":"<p>.tmux.conf</p>"},{"location":"iSH/iSH/#reboot","title":"REBOOT","text":"<pre><code>exit\n</code></pre>"},{"location":"iSH/iSH/#backgroundsh","title":"background.sh","text":"<pre><code>#!/bin/sh\n\nPCS=$(ps -elf | grep -v grep | grep \"cat /dev/location\" | awk '{print $1}')\n\necho &amp;&amp; echo \"* Location service for iSH muset be set to ALWAYS in Settings to work.\" &amp;&amp; echo\n\nif [ -z \"$PCS\" ]\nthen\n    # echo \"Location background service is NOT active, running NOW ...\"\n    cat /dev/location &gt; /dev/null &amp;\n    echo \"iSH app [ BACKGROUND mode is ENABLED ] - app will stay in BACKGROUND ...\"\nelse\n    # echo \"Location background service IS active, killing NOW ...\"\n    kill \"$PCS\"\n    echo \"iSH app [ BACKGROUND mode is DISABLED ]. iOS will terminate app later.\"\nfi\necho\n</code></pre>"},{"location":"iSH/iSH/#mount-folder-on-ios-ipados","title":"Mount Folder on iOS / iPadOS","text":"<pre><code>mkdir iPad iCloud_Drive idos3\nmount -t ios . iPad/   ### Now choose folder from Files app dialog ...\n...\n</code></pre>"},{"location":"iSH/iSH/#create-iso-image-from-folder","title":"Create ISO image from folder","text":"<pre><code>apk install cdrkit\nmkdir cd\n### Copy files ...\ngenisoimage -o cd.iso cd/\n</code></pre>"},{"location":"iSH/iSH/#7zip-on-ios","title":"7zip on iOS","text":"<pre><code>apk add p7zip\n7z x archive.7z\n</code></pre>"},{"location":"macOS/macOS-ColorShell/","title":"macOS Color Shell with Git status","text":""},{"location":"macOS/macOS-ColorShell/#show-colors-in-terminal","title":"Show Colors in Terminal","text":"<pre><code>#!/bin/bash\n\ncolor=0;\nwhile [ $color -lt 245 ]; do\n    echo -e \"$color: \\\\033[38;5;${color}mhello\\\\033[48;5;${color}mworld\\\\033[0m\"\n    ((color++));\ndone\n</code></pre>"},{"location":"macOS/macOS-ColorShell/#setup-in-zshrc","title":"Setup in ~/.zshrc","text":"<pre><code>git_status() {\n    # Early return if not in a git repository\n    git rev-parse --is-inside-work-tree &amp;&gt;/dev/null || return\n\n    local status_symbols=(\"\")\n    local git_status=\"$(git status --porcelain -b 2&gt;/dev/null)\"\n    local working_tree=$(echo \"$git_status\" | tail -n +2)  # Skip the first line (branch info)\n\n    # Branch status with colors\n    if echo \"$git_status\" | grep -q \"ahead\"; then\n        status_symbols+=(\"%F{cyan}?~F~Q%f\")    # Cyan for ahead\n    elif echo \"$git_status\" | grep -q \"behind\"; then\n        status_symbols+=(\"%F{yellow}?~F~S%f\")  # Yellow for behind\n    elif echo \"$git_status\" | grep -q \"diverged\"; then\n        status_symbols+=(\"%F{red}?~F~U%f\")     # Red for diverged\n    fi\n\n    # Working tree status with colors\n    if [[ -z \"$working_tree\" ]]; then\n        status_symbols+=(\"%F{green}?~\\~T%f\")   # Green for clean\n    else\n        # Check for untracked files\n        if echo \"$git_status\" | grep -q \"^??\"; then\n            status_symbols+=(\"%F{blue}?%f\")    # Blue for untracked\n        fi\n        # Check for unstaged modifications\n        if echo \"$git_status\" | grep -q \"^.M\"; then\n            status_symbols+=(\"%F{yellow}!%f\")  # Yellow for modified\n        fi\n        # Check for unstaged deletions\n        if echo \"$git_status\" | grep -q \"^.D\"; then\n            status_symbols+=(\"%F{red}-%f\")     # Red for deleted\n        fi\n        # Check for staged additions\n        if echo \"$git_status\" | grep -q \"^A\"; then\n            status_symbols+=(\"%F{magenta}+%f\") # Magenta for added\n        fi\n        # Check for staged modifications\n        if echo \"$git_status\" | grep -q \"^M\"; then\n            status_symbols+=(\"%F{magenta}M%f\") # Magenta for staged modifications\n        fi\n        # Check for staged deletions\n        if echo \"$git_status\" | grep -q \"^D\"; then\n            status_symbols+=(\"%F{magenta}D%f\") # Magenta for staged deletions\n        fi\n        # Check for renamed files\n        if echo \"$git_status\" | grep -q \"^R\"; then\n            status_symbols+=(\"%F{cyan}R%f\")    # Cyan for renamed\n        fi\n        # Check for copied files\n        if echo \"$git_status\" | grep -q \"^C\"; then\n            status_symbols+=(\"%F{cyan}C%f\")    # Cyan for copied\n        fi\n        # Check for merge conflicts\n        if echo \"$git_status\" | grep -q \"^U\\|^.U\\|^AA\\|^DD\"; then\n            status_symbols+=(\"%F{red}?~I| %f\")     # Red for conflicts\n        fi\n    fi\n\n    echo \" ${(j::)status_symbols} \"\n}\n\nfunction parse_git_branch() {\n    git branch 2&gt; /dev/null | sed -n -e 's/^\\* \\(.*\\)/[\\1]/p' || return\n}\n\nCOLOR_DEF=$'%f'        ### White\nCOLOR_USR=$'%F{039}'   ### Cyan\nCOLOR_DIR=$'%F{082}'   ### Green\nCOLOR_GIT=$'%F{11}'    ### Yellow\nPROMPT='${COLOR_USR}%n ${COLOR_DIR}%~${COLOR_GIT} $(parse_git_branch)${COLOR_DEF}$(git_status)$ '\n</code></pre> <p>Source on SO</p> <p>Linux version in ~/.bashrc</p>"},{"location":"macOS/macOS-Common/","title":"macOS Common","text":""},{"location":"macOS/macOS-Common/#hdd-format-fs-delete","title":"HDD format / FS delete","text":"<pre><code>diskutil listFilesystems\ndiskutil list\ndiskutil unmountDisk /dev/diskX\ndiskutil apfs deleteContainer diskX   ### ONLY if diskX is APFS container\n\n   ### FORMAT\ndiskutil eraseDisk ExFAT FLASH diskX   ### This will create EFI partition\ndiskutil eraseDisk ExFAT FLASH MBR diskX   ### EFI is not created\n    ### To DELETE all partitinos ONLY - to have empty HDD without filesystems\ndiskutil partitionDisk /dev/diskX MBR Free Space 100%\n</code></pre>"},{"location":"macOS/macOS-Common/#iso-dmg-conversion","title":"ISO / DMG conversion","text":"<p>From ISO to DMG</p> <pre><code>hdiutil convert -format UDRW file.iso -o file.dmg\n</code></pre> <p>From DMG to ISO</p> <pre><code>hdiutil convert -format UDTO file.dmg -o file.iso\n</code></pre>"},{"location":"macOS/macOS-Common/#create-installation-usb","title":"Create installation USB","text":"<p>For macOS</p> <pre><code>sudo /Applications/Install\\ macOS\\ Catalina.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume\n</code></pre> <p>For Linux, ISO needs to be converted to DMG format first</p> <pre><code>hdiutil convert -format UDRW -o ubuntu-iso.img ubuntu.iso\n</code></pre> <p>Write to Flash</p> <pre><code>diskutil list\ndiskutil unmountDisk /dev/diskX\nsudo dd if=ubuntu-iso.img.dmg of=/dev/rdiskX bs=1m conv=sync\n    ### you can see status using Control+T\ndiskutil eject /dev/diskX\n</code></pre>"},{"location":"macOS/macOS-Common/#create-boot-usb-flash-windows-iso","title":"Create BOOT USB FLASH Windows ISO","text":"<pre><code>diskutil list\ndiskutil unmountDisk /dev/diskX\nsudo dd if=windows.iso of=/dev/diskX bs=1m\ndiskutil eject /dev/diskX\n</code></pre>"},{"location":"macOS/macOS-Common/#repair-system-volume","title":"Repair system volume","text":"<p>Run <code>diskutil repairvolume &lt;diskX&gt;</code> in Terminal from Recovery Mode. Does not work anymore for encrypted volumes.</p> <p>Now run Disk Utility in Recovery Mode and repair the disk from there. After that, unmount and mount the disk. Then check if errors are gone and reboot.</p>"},{"location":"macOS/macOS-Common/#create-iso-from-folder-on-hdd","title":"Create ISO from Folder on HDD","text":"<p>Use Disk Utility &gt; File &gt; Image from Folder &gt; Browse to and select the folder containing your files Set the Image Format to DVD/CD master Convert CDR to ISO</p> <pre><code>hdiutil makehybrid -iso -joliet -o FILENAME.iso FILENAME.cdr\n</code></pre>"},{"location":"macOS/macOS-Common/#create-encrypted-dmg","title":"Create encrypted DMG","text":"<pre><code>hdiutil create -encryption AES-256 -stdinpass -size 6m -volname \"secureStorage\" -fs APFS ./secureStorage.dmg\nhdiutil attach ./secureStorage.dmg\nls -la /Volumes/secureStorage\nhdiutil detach /Volumes/secureStorage/\n</code></pre>"},{"location":"macOS/macOS-Common/#filevault-check-validate-recovery-key","title":"FileVault - Check, Validate Recovery Key","text":"<p>It's good to run this command from time to time and for sure when it was changed.</p> <pre><code>sudo fdesetup validaterecovery\n</code></pre>"},{"location":"macOS/macOS-Common/#set-login-screen-keyboard-layout","title":"Set Login Screen keyboard layout","text":"<pre><code># sudo languagesetup   ### doesn't work anymore\n# # ENG = 1            ### doesn't work anymore\nnvram prev-lang:kbd\nsudo nvram prev-lang:kbd=\"en_US:0\"\n</code></pre> <p>Logout / Restart. Should be english keyboard layout on login screen always. https://www.motionbug.com/jamf-connect-filevault-and-the-usa-keyboard/</p>"},{"location":"macOS/macOS-Common/#set-macos-http-proxy-in-terminal","title":"Set macOS HTTP Proxy in terminal","text":"<pre><code>export ALL_PROXY=px:3128\n</code></pre>"},{"location":"macOS/macOS-Common/#flush-dns-resolver","title":"Flush DNS resolver","text":"<pre><code>sudo killall -HUP mDNSResponder\n</code></pre>"},{"location":"macOS/macOS-Common/#protect-hosts","title":"Protect hosts","text":"<p>Set immutable</p> <pre><code>sudo chflags uchg /etc/hosts\nsudo chflags schg /etc/hosts\n</code></pre> <p>Unset immutable</p> <pre><code>sudo chflags nouchg /etc/hosts\nsudo chflags noschg /etc/hosts\n</code></pre>"},{"location":"macOS/macOS-Common/#handy-info-commands","title":"Handy Info Commands","text":"<pre><code>sw_vers\nsysctl -n hw.model\nsysctl -n hw.memsize\ndiskutil info diskX | grep \"Media Name\"\ndiskutil verifyVolume diskX   ### diskXsY ...\n</code></pre>"},{"location":"macOS/macOS-Common/#boot-startup-keys-reinstall","title":"Boot - Startup Keys, Reinstall","text":"<p>Start Built-in macOS Recovery system, NVRAM / PRAM / SMC reset, Safe Mode ...</p> <p>Mac startup key combinations Reinstall macOS Reset the SMC of your Mac</p>"},{"location":"macOS/macOS-Common/#boot-verbose-mode","title":"Boot - Verbose Mode","text":"<p><code>sudo nvram boot-args</code> - Show current settings <code>sudo nvram boot-args=\"-v\"</code> - Enable <code>sudo nvram boot-args=\"\"</code> - Disable</p>"},{"location":"macOS/macOS-Common/#debug-kernel-panic-in-human-readable-form","title":"Debug Kernel Panic in human readable form","text":"<pre><code>sudo nvram boot-args=\"-v keepsyms=y debug=0x144\"\nsudo nvram boot-args=\"-v keepsyms=y debug=0x14e\"   ### More verbose\n</code></pre>"},{"location":"macOS/macOS-Common/#smart-smartctl","title":"SMART smartctl","text":"<pre><code>diskutil list\ndiskutil info /dev/diskX | grep SMART      ### Basic info, only if S.M.A.R.T. is supported\nsudo smartctl -l error /dev/disk0          ### Full info if it's supported\n</code></pre>"},{"location":"macOS/macOS-Common/#plistbuddy-a-defaults","title":"PlistBuddy a defaults","text":"<p>Get BundleID</p> <pre><code>defaults read /System/Applications/Utilities/Terminal.app/Contents/Info.plist CFBundleIdentifier\n</code></pre> <p>Some Examples</p> <pre><code>/usr/libexec/PlistBuddy -c \"Print :AppleGlobalTextInputProperties:TextInputGlobalPropertyPerContextInput\" ~/Library/Preferences/com.apple.HIToolbox.plist\n/usr/libexec/PlistBuddy -c \"Print\" ~/Library/Preferences/com.apple.HIToolbox.plist\n/usr/libexec/PlistBuddy -c \"Set :AppleGlobalTextInputProperties:TextInputGlobalPropertyPerContextInput true\" ~/Library/Preferences/com.apple.HIToolbox.plist\n/usr/libexec/PlistBuddy -c \"Add :AppleGlobalTextInputProperties:TextInputGlobalPropertyPerContextInput bool true\" ~/Library/Preferences/com.apple.HIToolbox.plist\n</code></pre>"},{"location":"macOS/macOS-Common/#compress-to-zip-using-random-generated-password","title":"Compress to ZIP using random generated password","text":"<pre><code>openssl rand -base64 6 ; zip -er FILE.zip &lt;folder-OR-file&gt;\n</code></pre>"},{"location":"macOS/macOS-Common/#searching-filtering-logs","title":"Searching / Filtering logs","text":"<pre><code>### Network\nlog show --predicate '(processImagePath contains \"kernel\") &amp;&amp; (eventMessage contains \"AirPort: Link Down\")' --style syslog --last 1d   ### or 5m, 6h ...\n### Time Machine\nprintf '\\e[3J' &amp;&amp; log stream --predicate 'subsystem == \"com.apple.TimeMachine\"' --info\n</code></pre>"},{"location":"macOS/macOS-Common/#what-files-are-accessed-by-whom","title":"What FILES are accessed by whom","text":"<p>Talk on SuperUser Use <code>lsof</code>, <code>fs_usage</code>, or <code>GUI fseventer</code> </p> <pre><code>sudo fs_usage [PID]\n</code></pre>"},{"location":"macOS/macOS-Common/#disable-low-priority-for-background-processes","title":"Disable LOW priority for background processes","text":"<pre><code>sudo sysctl debug.lowpri_throttle_enabled=0\n</code></pre> <p>This will disable low priority for background processes including Time Machine. macOS Could be slower overal.</p>"},{"location":"macOS/macOS-Common/#list-loaded-kernel-extensions-kext","title":"List loaded kernel extensions / kext","text":"<pre><code>sudo kextstat --list-only\n</code></pre>"},{"location":"macOS/macOS-Common/#cpu-details-power-levels-load-overal-e-and-p-cores","title":"CPU details, power levels, load overal E and P cores","text":"<pre><code>sudo powermetrics -n 1 -s cpu_power   ### (info since from last boot)\n</code></pre>"},{"location":"macOS/macOS-Common/#swap-on-macos","title":"SWAP on macOS","text":"<p>Turn OFF</p> <pre><code>sudo launchctl unload -wF /System/Library/LaunchDaemons/com.apple.dynamic_pager.plist\n    ### REBOOT and after reboot: rm /var/vm/swapfile\n</code></pre> <p>Turn ON</p> <pre><code>sudo launchctl load -wF /System/Library/LaunchDaemons/com.apple.dynamic_pager.plist\n</code></pre> <p>Flush</p> <pre><code>purge\n</code></pre> <p>Show what's using swap right now</p> <pre><code>sudo fs_usage | egrep --color=auto \"PAGE_|swapfile\"\n</code></pre>"},{"location":"macOS/macOS-Common/#czech-spelling","title":"Czech Spelling","text":"<p>Download dictionary from OpenOffice To <code>~/Library/Spelling/</code> copy <code>cs_CZ.aff</code>, <code>cs_CZ.dic</code> and <code>hyph_cs_CZ.dic</code> Turn it on in System Preferences (Settings) &gt; Keyboard &gt; Text</p>"},{"location":"macOS/macOS-Common/#word-translation-to-cz-using-dictionary","title":"Word translation to CZ using Dictionary","text":"<p>Visit cesky-slovnik-macos on github and download latest version Copy <code>Czech/objects/Czech.dictionary</code> to <code>~/Library/Dictionaries/</code> (Show ~/Library folder with Command+Shift+L and create Dictionaries folder if not exists) In Dictionary &gt; Preferences enable <code>en-cs.txt</code> and move it UP  </p>"},{"location":"macOS/macOS-Common/#quicklook-plugins","title":"QuickLook plugins","text":"<p>Folders</p> <ul> <li>/System/Library/QuickLook/</li> <li>/Library/QuickLook/</li> <li>~/Library/QuickLook/</li> </ul> <p>Plugins</p> <ul> <li>http://www.quicklookplugins.com</li> <li>Certificate Quicklook</li> <li>ZIP viewer</li> <li>Image dimension</li> </ul> <p>Reload of plugin <code>qlmanage -r</code> and QL cache <code>qlmanage -r cache</code></p>"},{"location":"macOS/macOS-Common/#apple-mail","title":"Apple Mail","text":"<p>Disable of showing inline attachments</p> <pre><code>defaults write com.apple.mail DisableInlineAttachmentViewing -bool yes\n</code></pre> <p>Enable</p> <pre><code>defaults delete com.apple.mail DisableInlineAttachmentViewing\n</code></pre>"},{"location":"macOS/macOS-Common/#tcp-debug","title":"TCP Debug","text":"<pre><code>sudo lsof -iTCP -sTCP:LISTEN -n -P\nsudo lsof -i TCP -n -P\n</code></pre>"},{"location":"macOS/macOS-Common/#memory-compresssion-and-swap-settings","title":"Memory compresssion and swap settings","text":"<p>Default is <code>vm.compressor_mode: 4</code> Memory compressed ON, SWAP OFF <code>sudo nvram boot-args=\"vm_compressor=2\"</code> Memory compresses OFF, SWAP ON <code>sudo nvram boot-args=\"vm_compressor=1\"</code> Check after reboot:</p> <ul> <li><code>sysctl -a vm.compressor_mode</code></li> <li><code>sysctl vm.swapusage</code></li> </ul>"},{"location":"macOS/macOS-Common/#sqlite-db-view","title":"SQLite DB View","text":"<p>Autovacuum SQLite /private/var/db/systemstats/snapshots.db Maverick issue</p>"},{"location":"macOS/macOS-Common/#delay-standby-mode-os-sleep","title":"Delay Standby mode (OS sleep)","text":"<pre><code>sudo pmset -a standbydelay 86400   ### 24 hours\n</code></pre>"},{"location":"macOS/macOS-Common/#delay-hibernate-after-standby-mode","title":"Delay Hibernate after Standby mode","text":"<pre><code>sudo pmset -a autopoweroffdelay 43200   ### in seconds\n</code></pre>"},{"location":"macOS/macOS-Common/#xcrun-errors","title":"xcrun errors","text":"<p>xcrun: error: invalid active developer path ... missing xcrun at: ...</p> <pre><code>xcode-select --install\n</code></pre>"},{"location":"macOS/macOS-Common/#oobsolete-sleep-to-ram-only","title":"OOBSOLETE: Sleep to RAM only","text":"<pre><code>pmset -g   ### to see current settings\n</code></pre> <p>Disable hibernate to HDD</p> <pre><code>sudo pmset -a hibernatemode 0\n</code></pre> <p>Delete sleep image</p> <pre><code>sudo rm -f /private/var/vm/sleepimage\nsudo touch /private/var/vm/sleepimage\nsudo chflags uchg /private/var/vm/sleepimage   ### it can not be created now\n</code></pre>"},{"location":"macOS/macOS-Common/#obsolete-trim","title":"OBSOLETE: TRIM","text":"<pre><code>log show --predicate \"processID == 0\" | grep spaceman\nlog show --predicate \"processID == 0\" | grep spaceman | grep \"trims took\"\nlog show --start $(date +%F) | grep -i spaceman_scan_free_blocks\nlog show --start 2023-02-03 | grep -i spaceman_scan_free_blocks | grep \"trims took\"\nsudo trimforce enable   ### for non-Apple HDD\nsudo trimforce --enable   ### for non-Apple HDD\n</code></pre>"},{"location":"macOS/macOS-Common/#obsolete-ntfs","title":"OBSOLETE: NTFS","text":"<p>This is obsolete and probably not working.</p>"},{"location":"macOS/macOS-Common/#installation","title":"Installation","text":"<p>NTFS-3G wpbeaches.com </p> <ul> <li>Install FUSE for OS X from https://macfuse.github.io and Homebrew from https://brew.sh</li> <li> <ul> <li>When installing \"FUSE for OS X\" make sure to select the \"MacFUSE Compatibility Layer\" option.</li> </ul> <p>brew install homebrew/fuse/ntfs-3g   ### not working anymore brew tap gromgit/homebrew-fuse brew install ntfs-3g-mac sudo mv /sbin/mount_ntfs /sbin/mount_ntfs.original sudo ln -s /usr/local/sbin/mount_ntfs /sbin/mount_ntfs</p> </li> </ul> <p>If using El Capitan, System Integrity Protection's fs role will first need to be disabled.</p>"},{"location":"macOS/macOS-Common/#uninstallation","title":"Uninstallation","text":"<pre><code>sudo nvram boot-args=\"rootless=0\"   ### and REBOOT\n\nsudo rm /sbin/mount_ntfs\nsudo mv /sbin/mount_ntfs.original /sbin/mount_ntfs\nsudo nvram boot-args=\"rootless=1\"   ### and REBOOT\n\nbrew uninstall ...\n</code></pre>"},{"location":"macOS/macOS-Java/","title":"macOS Java","text":""},{"location":"macOS/macOS-Java/#installtion-from-oracle","title":"Installtion from Oracle","text":"<p>Oracle Install JDK Oracle Tech Downloads universal link</p> <p>Destination is <code>/Library/Java/JavaVirtualMachines/</code> as folder.</p>"},{"location":"macOS/macOS-Java/#uninstallation","title":"Uninstallation","text":"<pre><code>rm -rf  /Library/Java/JavaVirtualMachines/jdk-17.0.2.jdk/\n</code></pre>"},{"location":"macOS/macOS-Java/#installation-of-azul-for-arm-cpu-m-chips","title":"Installation of Azul for ARM CPU (M chips)","text":"<p>https://www.azul.com/downloads/?package=jdk#download-openjdk</p> <p>After unpack copy <code>zulu-8.jdk</code> to <code>/Library/Java/JavaVirtualMachines/</code></p>"},{"location":"macOS/macOS-Java/#jnlp-under-java-8-you-can-try-11-or-17-also","title":"JNLP under Java 8 (you can try 11 or 17 also)","text":"<p>You don't want to use this.  </p> <p>https://openwebstart.com/download/ Setup Proxy and JVM. Then run JNLP from Firefox, it won't open due to Security. So open Settings &gt; Security and click open anyway ...</p>"},{"location":"macOS/macOS-OpenCorePatcher/","title":"macOS OpenCore Patcher","text":""},{"location":"macOS/macOS-OpenCorePatcher/#installation-to-hdd-with-dualboot","title":"Installation to HDD with dualboot","text":"<ul> <li>Backup and Restore Boot Camp on a new mac for free</li> <li> <ul> <li>Page Backup in PDF</li> </ul> </li> </ul>"},{"location":"macOS/macOS-OpenCorePatcher/#how-to-proceed-with-bootcamp","title":"How to proceed with BootCamp","text":"<p>Check my comment on reddit</p> <p>Hi, I just installed OC on my 2 2017 iMacs, both with bootcamp. There is no issues at all and one iMac shows OC \"EFI Boot\" also after install on HDD. 2nd iMac didn't show that boot menu item (when holding Option key during startup), so I fixed it like this: Before you install OC on HDD</p> <pre><code>    ### mount EFI partition\ndiskutil list | grep EFI\nmkdir -p /Users/${USER}/tmp/tempEFI/\n    ### choose right EFI_PARTITION if you have more than one\nsudo mount_msdos /dev/EFI_PARTITION /Users/${USER}/tmp/tempEFI/\n    ### rename Microsoft folder to Microsoft-BAK and delete content of Boot/boot folder\n    ### (or backup content of Boot/boot folder. I didn't later.)\ncd /Users/${USER}/tmp/tempEFI/\nmv Microsoft Microsoft-BAK\nrm -f Boot/boot*\n    ### umount EFI partition using diskutil\nsudo diskutil unmount /Users/${USER}/tmp/tempEFI/\n    ### Install OC on HDD and remove USB Flash\n    ### Reset PRAM\n    ### Reboot with Option hey holding and select OC EFI Boot and then macOS Sonoma\n    ### mount EFI, rename MS folder back and unmount, reboot with Option key\nsudo mount_msdos /dev/EFI_PARTITION /Users/${USER}/tmp/tempEFI/\nmv Microsoft-BAK Microsoft\nsudo diskutil unmount /Users/${USER}/tmp/tempEFI/\n    ### Now naming/icon was wrong - OC EFI Boot name is Windows with OC icon.\n    ### Select it and you can see now proper naming and icons. Select macOS and let it boot ...\n    ### in macOS, set Startup Disk to Macintosh HD or where you Sonoma/Seqoia/... is.\n</code></pre> <p>This way both my iMacs boot to macOS automatically. Hope it helps.</p>"},{"location":"macOS/macOS-OpenCorePatcher/#installation","title":"Installation","text":"<p>If the <code>EFI Boot</code> menu item (where the OCP EFI part is) is not displayed when installing on a dual boot HDD (Windows), you need to move the <code>Boot/boot</code> directory (delete) in the EFI partition (under the <code>EFI/</code> directory) and rename the <code>Microsoft</code> directory to <code>Microsoft-BAK</code>. Afterwards, the OCP installation into EFI on the HDD should go through fine and during boot the OC <code>EFI Boot</code> (or with the Windows name but the OCP icon) should appear even without the USB Flash (which we have to remove before restarting). Then Shutdown with PRAM reset (option command P R and Startup button)</p>"},{"location":"macOS/macOS-OpenCorePatcher/#restore-microsoft-windows-in-the-efi-menu","title":"Restore Microsoft Windows in the EFI menu","text":"<p>Just remount the EFI partition after booting macOS and rename <code>Microsoft-BAK</code> to <code>Microsoft</code>. In the EFI menu (Hold Option key before chime boot sound) it will say Windows, but the icon will be OCP (OpenCore Patcher). MacOS and Windows can be started after selecting the OCP icon (now named Windows) :)</p>"},{"location":"macOS/macOS-OpenCorePatcher/#boot-into-macos-if-not-selected-automatically","title":"Boot into macOS - if not selected automatically","text":"<p>Just set the Startup Disk to <code>Macintosh HD</code>.</p>"},{"location":"macOS/macOS-OpenCorePatcher/#recovery","title":"Recovery","text":"<p>https://dcg-ipod.affinityco.net/blogs/help-2/kb-60604-reinstalling-macos-on-a-device-with-opencore Follow the steps in the app. You will need to:</p> <ul> <li>Download a copy of the macOS installer. You can choose from a list of different versions - it is recommended to use the same version that you have currently installed. Check which version you have by viewing <code>About this Mac</code> in the Apple menu.</li> <li>Copy the macOS installer to a USB drive</li> <li>Install OpenCore to the USB drive</li> </ul> <p>If you can't follow these steps on your Mac because you can't use it, then you will need to use another Macintosh computer to do so. We recommend preparing a Recovery USB drive ahead of time - make it a part of your backup plan for your data.</p> <p>To use your Recovery drive, turn off your Mac. Then:</p> <ul> <li>Turn on your Mac whilst holding cmd + opt + P + R until you hear the chime twice</li> <li>Hold opt until you see a menu appear</li> <li>Choose OpenCore / EFI from the menu</li> <li>Choose Install macOS from the next menu that appears</li> </ul>"},{"location":"macOS/macOS-OrbStack/","title":"macOS OrbStack","text":"<ul> <li>Download from web or use homebrew <code>brew install orbstack</code></li> <li>Linux Distributions</li> <li>Linux Machines</li> <li>Networking / Direct Access</li> <li>SSH access and Ansible Setup</li> </ul>"},{"location":"macOS/macOS-OrbStack/#orb-list","title":"Orb List","text":"<pre><code>orb list\n</code></pre>"},{"location":"macOS/macOS-OrbStack/#create-vm","title":"Create VM","text":"<pre><code>orb create --help\norb create ubuntu VM_NAME\n    ### orb create --arch amd64 ubuntu VM_NAME\n</code></pre>"},{"location":"macOS/macOS-OrbStack/#connect-to-machine","title":"Connect to machine","text":"<pre><code>orb   ### default machine and user will be started / used\norb -m VM_NAME   ### login to VM_NAME as default user\norb -m VM_NAME -u root   ### login to VM_NAME as root\n</code></pre>"},{"location":"macOS/macOS-OrbStack/#initial-setup","title":"Initial setup","text":"<pre><code>cd\necho 'cd' &gt;&gt; .bashrc\necho 'alias s=\"sudo su -\"' &gt;&gt; .bashrc\n</code></pre> <p>Proxy</p> <pre><code>echo 'Acquire::http::Proxy \"http://${HOST}:3128\";' &gt; /etc/apt/apt.conf.d/99proxy\n</code></pre> <p>Update and Install</p> <pre><code>sudo apt update\nsudo apt dist-upgrade -y \nsudo apt install -y software-properties-common bash-completion vim git sudo dialog tzdata net-tools curl wget netcat-openbsd rsync\n    ### Turn off unattended upgrades\n# echo 'Unattended-Upgrade::Allowed-Origins:: \"LP-PPA-mozillateam:${distro_codename}\";' | sudo tee /etc/apt/apt.conf.d/51unattended-upgrades-firefox\nsudo apt purge unattended-upgrades\n</code></pre>"},{"location":"macOS/macOS-OrbStack/#clone-vm","title":"Clone VM","text":"<pre><code>orb clone VM_NAME VM_NAME_CLONE\n</code></pre>"},{"location":"macOS/macOS-OrbStack/#delete-vm","title":"Delete VM","text":"<pre><code>orb delete VM_NAME\n</code></pre>"},{"location":"macOS/macOS-OrbStack/#orb-start-stop","title":"Orb Start, Stop, ...","text":"<pre><code>for i in $(orb list -q) ; do orb stop $i ; done   ### stop ALL VMs\norb start VM_NAME\norb stop VM_NAME\n</code></pre>"},{"location":"macOS/macOS-OrbStack/#set-default-orb-vm","title":"Set default Orb VM","text":"<pre><code>orb default\norb default VM_MAME\n</code></pre>"},{"location":"macOS/macOS-OrbStack/#boot-logs","title":"Boot logs","text":"<pre><code>orb logs VM_NAME\n</code></pre>"},{"location":"macOS/macOS-OrbStack/#list-all-commands","title":"List all commands","text":"<pre><code>orbctl --help\n</code></pre>"},{"location":"macOS/macOS-OrbStack/#xrdp-gui","title":"Xrdp GUI","text":"<pre><code>sudo apt install -y xrdp xorgxrdp\nsudo apt install -y xfce4 xfce4-goodies\necho \"xfce4-session\" | tee .xsession\n</code></pre>"},{"location":"macOS/macOS-OrbStack/#error-on-ubuntu-2410","title":"Error on Ubuntu 24.10","text":"<p>In user's home log <code>.xorgxrdp.10.log</code> is error</p> <pre><code>expected xrdp client_info version 20230425, got 20210723\n(EE) Incompatible xrdp version detected  - please recompile(EE)\n</code></pre> <p>Xrdp and xorgxrdp have been compiled at different versions in Oracular</p> <p>Can be resolved by early upgrading to plucky from this reddit thread</p> <pre><code>wget -c http://archive.ubuntu.com/ubuntu/dists/plucky/main/dist-upgrader-all/current/plucky.tar.gz\ntar zxvf plucky.tar.gz\n./plucky\n</code></pre>"},{"location":"macOS/macOS-OrbStack/#web-browser","title":"Web Browser","text":"<p>Latest stable Firefox</p> <pre><code>sudo add-apt-repository ppa:mozillateam/ppa\n</code></pre> <p>Prioritize apt version over snap one</p> <pre><code>echo '\nPackage: *\nPin: release o=LP-PPA-mozillateam\nPin-Priority: 1001\n\nPackage: firefox\nPin: version 1:1snap*\nPin-Priority: -1\n' | sudo tee /etc/apt/preferences.d/mozilla-firefox\n</code></pre> <p>Install</p> <pre><code>sudo apt install firefox\n</code></pre> <p>Source</p>"},{"location":"macOS/macOS-OrbStack/#data-storage","title":"Data Storage","text":"<pre><code>du -sh ~/Library/Group\\ Containers/HUAQ24HBR6.dev.orbstack/data\n</code></pre>"},{"location":"macOS/macOS-Privacy/","title":"masOS Privacy","text":""},{"location":"macOS/macOS-Privacy/#reset-access-to-camera-and-microphone","title":"Reset access to Camera and Microphone","text":"<pre><code>sudo tccutil reset Camera\nsudo tccutil reset Microphone\n</code></pre>"},{"location":"macOS/macOS-Privacy/#reset-access-for-terminal-app","title":"Reset access for Terminal app","text":"<pre><code>sudo tccutil reset Camera com.apple.Terminal\nsudo tccutil reset All com.apple.Terminal\n</code></pre>"},{"location":"macOS/macOS-Privacy/#reset-all","title":"Reset ALL","text":"<pre><code>sudo tccutil reset All\n</code></pre>"},{"location":"macOS/macOS-Privacy/#man-tccutil","title":"man tccutil","text":"<pre><code>sudo tccutil command service [bundle_id]\n</code></pre> <p>service could be</p> <pre><code>Accessibility\nAddressBook\nAppleEvents      ### Automation\nCalendar\nCamera\nMicrophone\nPhotos\nReminders\nScreenCapture\nSystemPolicyAllFiles\nSystemPolicyDesktopFolder\nSystemPolicyDeveloperFiles\nSystemPolicyDocumentsFolder\nSystemPolicyDownloadsFolder\nSystemPolicyNetworkVolumes\nSystemPolicyRemovableVolumes\nSystemPolicySysAdminFiles\n</code></pre>"},{"location":"macOS/macOS-Privacy/#check-app-access","title":"Check app access","text":"<p>Use Apparency app</p>"},{"location":"macOS/macOS-Safari/","title":"macOS Safari","text":""},{"location":"macOS/macOS-Safari/#clean-dns-cache-in-safari","title":"Clean DNS cache in Safari","text":"<ul> <li>Safari &gt; Preferences &gt; Advanced and check \"Show develop menu in menu bar\"  </li> <li>Develop &gt; Empty Caches (shortcut is \u2325\u2318E)  </li> <li>(Restart of Safari may be needed)</li> </ul>"},{"location":"macOS/macOS-Safari/#safari-tabs-rescue","title":"Safari Tabs Rescue","text":"<p><code>cd ~/Library/Safari</code></p> <p>Perform backup of files before you touch them.</p> <p>More records than in Safari menu <code>plutil -p RecentlyClosedTabs.plist | grep TabURL</code></p> <p>Inspect history <code>sqlite3 History.db</code></p> <pre><code>SELECT datetime(visit_time + 978307200, 'unixepoch', 'localtime'), url \nFROM history_visits \nJOIN history_items ON history_visits.history_item = history_items.id \nORDER BY visit_time DESC;\n</code></pre> <p>OR one-liner</p> <pre><code>sqlite3 History.db \"SELECT datetime(visit_time + 978307200, 'unixepoch', 'localtime'), url FROM history_visits JOIN history_items ON history_visits.history_item = history_items.id ORDER BY visit_time DESC;\"\n</code></pre>"},{"location":"macOS/macOS-Safari/#other-tips","title":"Other tips","text":"<p>If you have TimeMachine backup, you can try to restore from it, but it doesn't work for me.</p> <p><code>/Users/${USER}/Library/Containers/com.apple.Safari/Data/Library/Saved Application State/</code></p> <p>Backup SQLite DB <code>SafariTabs*</code> and <code>CloudTabs*</code></p> <ul> <li>Path depending on macOS version</li> <li> <ul> <li><code>/Users/${USER}/Library/Containers/Safari/Data/Library/Safari/</code></li> </ul> </li> <li> <ul> <li><code>/Users/${USER}/Library/Containers/com.apple.Safari/Data/Library/Safari/</code></li> </ul> </li> </ul>"},{"location":"macOS/macOS-ShellScripting/","title":"macOS Shell Scripting","text":""},{"location":"macOS/macOS-ShellScripting/#fill-password-for-sudo-in-shell-script","title":"Fill password for sudo in shell script","text":"<p>DANGER! Do not borrow your terminal to anybody. </p> <p>Open Keychain Access, select login keychain and use Create New ...</p> <p></p> <p>Create alias</p> <p></p> <p>Use it</p> <pre><code>PASS=$(security find-generic-password -l \"sudoPassword\" -a jr -w | tr -d '\\n')\n# -l = name of item in Keychain\n# -a = account name\n# -w = return password only\necho \"$PASS\" | sudo -S whoami\n</code></pre> <p>Allow <code>security</code> utility to access <code>Keychain</code> always ...</p>"},{"location":"macOS/macOS-Spotlight/","title":"macOS Spotlight","text":""},{"location":"macOS/macOS-Spotlight/#db-reset","title":"DB Reset","text":"<p>Run as owner for network homes, otherwise run as root.</p> <pre><code>mdutil   ### To show options ...\n</code></pre> <p>Show Status and Workers</p> <pre><code>mdutil -asv\nps -ceo command | grep -c mdworker\n</code></pre> <p>Global - Disable and Reset</p> <pre><code>sudo mdutil -a -i off\nsudo mdutil -aE\nsudo rm -rf /System/Volumes/Data/.Spotlight-V100/\n</code></pre> <p>User - Delete Spotlight now</p> <pre><code>rm -rf Library/Metadata/CoreSpotlight/\nsudo pkill mds\nsudo pkill mds_stores\nsudo pkill mdbulkimport\n</code></pre> <ul> <li>You can try <code>mdutil -X</code> also.</li> </ul> <p>Enable without Reboot</p> <pre><code>sudo mdutil -a -i on\nsudo killall Spotlight\n</code></pre> <p>Enable with Reboot</p> <pre><code>### ... REBOOT ...\nsudo mdutil -a -i on\n</code></pre>"},{"location":"macOS/macOS-Spotlight/#if-icon-is-in-wrong-state-restart-ui-server","title":"If icon is in wrong state, restart UI Server","text":"<pre><code>killall SystemUIServer\n</code></pre>"},{"location":"macOS/macOS-Spotlight/#do-not-index-hdd","title":"Do NOT index HDD","text":"<pre><code>touch /.metadata-never-index\n</code></pre>"},{"location":"macOS/macOS-Spotlight/#plugins","title":"Plugins","text":"<p>Installed plugins for Spotlight - macOS know many UTIs - these are additional.</p> <pre><code>mdimport -L\n</code></pre> <p>Run mddiagnose for DEBUG.</p>"},{"location":"macOS/macOS-Spotlight/#show-log","title":"Show log","text":"<pre><code>log stream --predicate '(process == \"mdworker\" OR process == \"mdworker_shared\")' --info\nlog stream --predicate '(process == \"mds_stores\" OR process == \"mdsync\" OR process == \"mdwrite\")' --info\n</code></pre>"},{"location":"macOS/macOS-TimeMachine/","title":"macOS Time Machine","text":"<ul> <li>sparsebundle, backupdb, etc</li> </ul>"},{"location":"macOS/macOS-TimeMachine/#searching-in-logs","title":"Searching in logs","text":"<p>Live Stream</p> <pre><code>printf '\\e[3J' &amp;&amp; log stream --predicate 'subsystem == \"com.apple.TimeMachine\"' --info\n</code></pre> <p>Specified date or time windows</p> <pre><code>printf '\\e[3J' &amp;&amp; log show --predicate 'subsystem == \"com.apple.TimeMachine\"' --info --last 3h\nprintf '\\e[3J' &amp;&amp; log show --predicate 'subsystem == \"com.apple.TimeMachine\"' --info --start \"2024-06-08 01:00:00\" --end \"2024-06-08 06:00:00\"\n | egrep \"Starting backup with mode|Backup succeeded|Backup failed\"\n | grep -A 1 \"Finished copying items for\"\n</code></pre> <p>Meta data Delta. If it's \"Zero KB\" - delta backups doesn't work and only way I made it working again was OS reinstall. More on this issue on reddit</p> <pre><code>| grep \" backups:\"\n</code></pre>"},{"location":"macOS/macOS-TimeMachine/#list-local-snapshots-by-date","title":"List local snapshots by date","text":"<pre><code># tmutil listlocalsnapshots / \ntmutil listlocalsnapshotdates /\n</code></pre>"},{"location":"macOS/macOS-TimeMachine/#delete-local-snapshots","title":"Delete local snapshots","text":"<pre><code>tmutil deletelocalsnapshots &lt;DATE.NUMBER&gt;\n</code></pre>"},{"location":"macOS/macOS-TimeMachine/#delete-all-local-snapshots","title":"DELETE ALL LOCAL SNAPSHOTS","text":"<pre><code>for i in $(tmutil listlocalsnapshotdates / | grep '[0-9][0-9][0-9][0-9]') ; do echo -n \"DELETING $i ...\" ; tmutil deletelocalsnapshots $i ; done\n</code></pre>"},{"location":"macOS/macOS-TimeMachine/#other-usefull-commands","title":"Other Usefull Commands","text":"<pre><code>tmutil status\ntmutil enable\ntmutil disable\ntmutil startbackup\ntmutil startbackup -d 530BA50F-A553-46C3-A625-70DBABC72C9E\n   ### List of backups in current folder on local backup HDD\ntmutil listbackups\n   ### List of backup on network backup - mount when starting backup or just Browse Time Machine backups from TM menu ...\ntmutil listbackups -d \"/Volumes/Backups of Macbook Air M1\"\n   ### SETTINGS\ndefaults read /Library/Preferences/com.apple.TimeMachine.plist\ndefaults read /System/Library/Preferences/Logging/Subsystems/com.apple.TimeMachine.plist\n</code></pre>"},{"location":"macOS/macOS-TimeMachine/#set-quota","title":"Set QUOTA","text":"<pre><code>tmutil destinationinfo\n====================================================\nName          : timemachine\nKind          : Network\nURL           : smb://smbuser@tm._smb._tcp.local./timemachine\nID            : 530BA50F-A553-46C3-A625-70DBABC72C9E\nQuota         : 380 GB\n</code></pre> <p>Now you can use</p> <pre><code>### tmutil setquota &lt;ID&gt; &lt;SIZE_IN_GB&gt;\ntmutil setquota 530BA50F-A553-46C3-A625-70DBABC72C9E 130\n</code></pre>"},{"location":"macOS/macOS-TimeMachine/#show-extended-attributes-on-linux","title":"Show Extended attributes on Linux","text":"<pre><code>apt install attr\n# file: media/TimeMachine-Backup\ngetfattr /media/TimeMachine-Backup\nuser.org.netatalk.Metadata\nuser.org.netatalk.has-Extended-Attributes\n</code></pre> <p>If there are no extended attributes, result is EMPTY.</p>"},{"location":"macOS/macOS-Virtualization/","title":"macOS - Virtualization","text":""},{"location":"macOS/macOS-Virtualization/#vmware-fusion","title":"VMware Fusion","text":"<pre><code>brew install vmware-fusion\n</code></pre> <ul> <li>or install from VMware / Broadcom Page</li> </ul>"},{"location":"macOS/macOS-Virtualization/#windows-11","title":"Windows 11","text":""},{"location":"macOS/macOS-Virtualization/#installation-without-ms-account-local-only","title":"Installation without MS account, local only.","text":"<p>During installation it will ask for license, continue and then there is a screen that can ask for network driver or login to MS account. Press <code>Shift + (Fn) F10</code> and then in command line that will appear run <code>start ms-cxh:localonly</code></p> <ul> <li>DirectX Download</li> </ul>"},{"location":"macOS/macOS-Virtualization/#copied-or-moved-vm-issue","title":"Copied or Moved VM issue","text":"<p>If VMware Fusion asks every start of VM.</p> <pre><code>cd /Library/Application\\ Support/VMware/VMware\\ Fusion/Shared\nmv vmInventory vmInventory.save\nln -s ~/Library/Application\\ Support/VMware\\ Fusion/vmInventory .\n</code></pre> <p>Check post 44 on VMs constantly asking if I Copied or Moved VM from Ken Feldman</p>"},{"location":"macOS/macOS-Virtualization/#ubuntu-24-lts","title":"Ubuntu 24 LTS","text":"<p>Install ARM Ubuntu server and then install desktop and VM tools using</p> <pre><code>sudo apt install -y ubuntu-desktop\nsudo apt install -y open-vm-tools open-vm-tools-desktop\n</code></pre> <ul> <li>Enable Auto Login</li> <li>Disable Screen Auto Lock</li> </ul>"},{"location":"macOS/macOS-iTerm2/","title":"macOS - iTerm2","text":""},{"location":"macOS/macOS-iTerm2/#installation","title":"Installation","text":"<ul> <li>iTerm2 Website</li> <li>or <code>brew install --cask iTerm2</code></li> </ul>"},{"location":"macOS/macOS-iTerm2/#install-font-sf-mono","title":"Install font SF Mono","text":"<ul> <li>Open all <code>SF-Mono...</code> fonts using Finder from system Terminal app at <code>/System/Applications/Utilities/Terminal.app/Contents/Resources/Fonts/</code> in Font Book and Install them.</li> <li>Or download them from Apple Fonts Page</li> </ul>"},{"location":"macOS/macOS-iTerm2/#configuration","title":"Configuration","text":"<p><code>tmux</code> settings make sense if using SSH and something like <code>tmux -CC new -A -s git1</code></p> <ul> <li>General</li> <li> <ul> <li>Selection</li> </ul> </li> <li> <ul> <li> <ul> <li>Disable <code>Automatically enter copy mode on Shift+Arrow key with selection</code></li> </ul> </li> </ul> </li> <li> <ul> <li>tmux</li> </ul> </li> <li> <ul> <li> <ul> <li>Enable <code>Automatically bury the tmux client session after connecting</code> which will hide window with tmux session with control channel and show only iTerm2 terminal.</li> </ul> </li> </ul> </li> <li> <ul> <li> <ul> <li>Disable <code>Use \"tmux\" profile rather than profile of the connecting session</code> to use default profile settings</li> </ul> </li> </ul> </li> <li> <p>Profiles (Default)</p> </li> <li> <ul> <li>Colors</li> </ul> </li> <li> <ul> <li> <ul> <li>Background - <code>000000</code></li> </ul> </li> </ul> </li> <li> <ul> <li> <ul> <li>Foreground - <code>ffffff</code></li> </ul> </li> </ul> </li> <li> <ul> <li> <ul> <li>Red - <code>c74d35</code></li> </ul> </li> </ul> </li> <li> <ul> <li> <ul> <li>Blue - <code>5369f9</code></li> </ul> </li> </ul> </li> <li> <ul> <li>Text</li> </ul> </li> <li> <ul> <li> <ul> <li>Thin strokes <code>On Retina Displays</code> should be enabled by default</li> </ul> </li> </ul> </li> <li> <ul> <li> <ul> <li>Font - <code>SF Mono</code> - <code>Light</code> - <code>16</code> - 100 - 100</li> </ul> </li> </ul> </li> <li> <ul> <li> <ul> <li><code>Anti-aliased</code> should be enabled by default</li> </ul> </li> </ul> </li> <li> <ul> <li>Window</li> </ul> </li> <li> <ul> <li> <ul> <li>Transparency - <code>5</code></li> </ul> </li> </ul> </li> <li> <ul> <li>Terminal</li> </ul> </li> <li> <ul> <li> <ul> <li>Scrollback lines: <code>10000</code></li> </ul> </li> </ul> </li> <li> <ul> <li>Keys</li> </ul> </li> <li> <ul> <li> <ul> <li>Key Bindings</li> </ul> </li> </ul> </li> <li> <ul> <li> <ul> <li> <ul> <li>In <code>Presets...</code> choose <code>Natural Text Editing</code> for default macOS keys navigation</li> </ul> </li> </ul> </li> </ul> </li> <li> <ul> <li> <ul> <li> <ul> <li>Delete <code>Send Hex Codes: 0x4</code> to enable <code>Delete</code> key on Apple External Keyboard</li> </ul> </li> </ul> </li> </ul> </li> </ul>"}]}